StartGamePanel = class("StartGamePanel",BaseView)
autoImport("NetPrefix")
autoImport('CSharpObjectForLogin')
autoImport('UIRoleSelect')
autoImport('LoginRoleSelector')
autoImport('FunctionLoginAnnounce')
autoImport('MonthlyVIPTip')
StartGamePanel.ViewType = UIViewType.MainLayer

PlayerPrefsMYServer = "PlayerPrefsMYServer";
PlayerPrefsQuickAcc = "PlayerPrefsQuickAcc";
PlayerPrefaccount = "PlayerPrefaccount";
PlayerPrefpwds = "PlayerPrefpwds";
PlayerPrefsDefaultName = "PlayerPrefsDefaultName";
PlayerPrefsAgreement = "PlayerPrefsAgreement";

-- StartGamePanel.LogoTextureName = "login_bg_logo";
local tempVector3 = LuaVector3.zero
StartGamePanel.BgTextureName = "login_bg_bottom"; --login_bg_bottom

function StartGamePanel:Init()
	self:initView();	
	self:AddEvt();
	self:MapSwitchHandler();
	
end

function StartGamePanel:OnEnter(  )
	-- body
	self:initData()
	self:InitShow();
	self:ChangeBtnStToNormal()
	self:updateAgreementPos()
end

function StartGamePanel:initData(  )
	self:initLoginView()
	self:UpdateServerList()
	self:SetVersion()
	self:initAgreement()
end

function StartGamePanel:initAgreement()
	if(PlayerPrefs.HasKey(PlayerPrefsAgreement)) then
		local value = PlayerPrefs.GetInt(PlayerPrefsAgreement,0) == 1
		self.checkBox.value = value
	end
end

function StartGamePanel:requestAnnouncement()
	if(self.BlockRequestAnnounceTwId)then
		LeanTween.cancel(self.gameObject,self.BlockRequestAnnounceTwId)
		self.BlockRequestAnnounceTwId = nil
	end
	local ret = LeanTween.delayedCall(self.gameObject,0.05,function (  )
		self.BlockRequestAnnounceTwId = nil
		FunctionLoginAnnounce.Me():requestAnnouncement()
	end)
	self.BlockRequestAnnounceTwId = ret.uniqueId
end

function StartGamePanel:initLoginView(  )
	-- body
	local SDKEnable = false
	if(SDKEnable)then
		self:Hide(self.accInput.gameObject)
		self:Hide(self.quickEnterBtn.gameObject)
		self:HideZoneBTN()
		self:Hide(self.deleteBtn.gameObject)
		local pos = self.clickBtn.transform.localPosition
		local _,y,_ = LuaGameObject.GetLocalPosition(self.clickBtn.transform)
		tempVector3:Set(0,y,0);
		self.clickBtn.transform.localPosition = tempVector3
		self:Show(self.goPlatformEntrance)		
		self:requestAnnouncement()
		-- FunctionLogin.Me():launchAndLoginSdk(  )
	else
		self:ShowZoneBTN()
		self:Show(self.accInput.gameObject)
		self:Show(self.pwdInput.gameObject)
		if(PlayerPrefs.HasKey(PlayerPrefsMYServer)) then
			self.serverid = PlayerPrefs.GetInt(PlayerPrefsMYServer)
			self.serverData = Table_ServerList[self.serverid]
		end
		if(self.serverid and not self.serverData)then
			self.serverid = nil
		end
		-- self:Show(self.deleteBtn.gameObject)		
		self:Show(self.goPlatformEntrance)
		self:Show(self.gochangepass)
	end
end

function StartGamePanel:ShowZoneBTN()
	local transZoneBTN = self.zoneBtn.transform
	local localPos = transZoneBTN.localPosition
	localPos.y = -75.3
	transZoneBTN.localPosition = localPos
	self:Show(self.zoneBtn.gameObject)
end

function StartGamePanel:HideZoneBTN()
	if(EnvChannel.Channel.Name == EnvChannel.ChannelConfig.Release.Name)then
		self:Hide(self.zoneBtn.gameObject)
	end
end

function StartGamePanel:initView()
    self.container = self:FindComponent("Container", UIWidget)
    self.accInput = self:FindComponent("AccountInput", UIInput)
    self.pwdInput = self:FindComponent("PasswordInput", UIInput)
    self.pwdret = 0

    -- Mask password manually (just in case)
    local label = self:FindComponent("Label", UILabel, self.accInput.gameObject)
    local label1 = self:FindComponent("Label1", UILabel, self.pwdInput.gameObject)
    label1.text = string.rep("*", #self.pwdInput.value)
    EventDelegate.Set(self.pwdInput.onChange, function()
        local password = self.pwdInput.value
        label1.text = string.rep("*", #password)
    end)

    self.clickBtn = self:FindGO("StartBtn")
    self.StartBtnCollider = self:FindComponent("StartBtnCollider", BoxCollider)
    self.zoneBtn = self:FindComponent("ZoneBtn", UIButton)
    self.serverLab = self:FindComponent("serviceLabel", UILabel)
    self.serverLab.text = ZhString.StartGamePanel_ChooseServerPrompt

    self.deleteBtn = self:FindComponent("DeleteRoleBtn", UIButton)
    self.quickEnterBtn = self:FindComponent("quickEnterBtn", UIButton)
    self.versionLabel = self:FindComponent("VersionLabel", UILabel)
    self.bgTexture = self:FindComponent("BgTexture", UITexture)
    self.selectTipLabel = self:FindComponent("selectTipLabel", UILabel)
    self.selectTipLabel.text = ZhString.StartGamePanel_SelectTipLabel

    local ServerConnectingLabel = self:FindComponent("ServerConnectingLabel", UILabel)
    ServerConnectingLabel.text = ZhString.Login_ConnectingServer
    self.ServerConnecting = self:FindGO("ServerConnecting")
    self.cancelConnBtn = self:FindGO("cancelConnBtn")

    self.waitingView = self:FindGO("WaitingView")
    local WaitingLabel = self:FindComponent("WaitingLabel", UILabel)
    WaitingLabel.text = ZhString.StartGamePanel_WaitingLabel
    local WaitingViewSp = self:FindComponent("WaitingViewSp", UISprite)
    WaitingViewSp:UpdateAnchors()
    local WaitingContainer = self:FindGO("WaitingContainer")
    local bound = NGUIMath.CalculateRelativeWidgetBounds(WaitingContainer.transform, true)
    local sizeX = bound.size.x
    tempVector3:Set(sizeX / 2, 0, 0)
    WaitingContainer.transform.localPosition = tempVector3

    PictureManager.Instance:SetUI(StartGamePanel.BgTextureName, self.bgTexture)
    self.bgTexture:MakePixelPerfect()
    PictureManager.ReFitiPhoneXScreenHeight(self.bgTexture)
    self:HideConnecting()
    self:Hide(self.cancelConnBtn)

    self.startEffectPath = ResourcePathHelper.EffectUI(EffectMap.UI.GameStart)
    local obj = Game.AssetManager_UI:CreateAsset(self.startEffectPath, self.clickBtn)
    if obj and self:FindComponents(Animator, obj) then
        tempVector3:Set(0, 0, 0)
        obj.transform.localPosition = tempVector3
        tempVector3:Set(1, 1, 1)
        obj.transform.localScale = tempVector3
        local anims = self:FindComponents(Animator, obj)
        self.anim = anims[1]
    end

    local agreetmentLabel = self:FindComponent("agreetmentLabel", UILabel)
    agreetmentLabel.text = ZhString.StartGamePanel_AgreetmentLabel
    self:AddClickEvent(agreetmentLabel.gameObject, function()
        self:ShowAgreement()
    end)

    self.checkBox = self:FindComponent("checkBox", UIToggle)
    local copyrightLabel = self:FindComponent("copyrightLabel", UILabel)
    copyrightLabel.text = ZhString.StartGamePanel_CopyRightTips
    EventDelegate.Set(self.checkBox.onChange, function()
        self:CheckBoxChange()
    end)
end

function StartGamePanel:updateAgreementPos()
	local agreetmentCt = self:FindGO("labelCt")
	local bound = NGUIMath.CalculateRelativeWidgetBounds(agreetmentCt.transform,true)
	local x,y,z = LuaGameObject.GetLocalPosition(agreetmentCt.transform)
	local posX = bound.center.x
	tempVector3:Set(0,y,z);
	agreetmentCt.transform.localPosition = tempVector3
end

function StartGamePanel:ShowAgreement()
	GameFacade.Instance:sendNotification(UIEvent.ShowUI,{viewname = "AgreementPanel"})	
end

function StartGamePanel:CheckBoxChange()
	local value = self.checkBox.value
	PlayerPrefs.SetInt(PlayerPrefsAgreement,value and 1 or 0)
end

function StartGamePanel:OnExit()
	-- PictureManager.Instance:UnLoadUI(StartGamePanel.LogoTextureName,self.logoTexture);
	PictureManager.Instance:UnLoadUI(StartGamePanel.BgTextureName,self.bgTexture);
	StartGamePanel.super.OnExit(self);
	if(self.cancelLoginTipId)then
		LeanTween.cancel(self.gameObject,self.cancelLoginTipId)
	else
		LeanTween.cancel(self.gameObject)
	end
end

function StartGamePanel:SetVersion()
	local clientVersion = BackwardCompatibilityUtil.GetCurrentVersionName()
	local resVersion = VersionUpdateManager.CurrentVersion
	if(resVersion==nil) then resVersion = "Unknown" end
	self.versionLabel.text = string.format(ZhString.StartGamePanel_Version,clientVersion,resVersion)
end

function StartGamePanel:AddEvt()
    self:AddClickEvent(self.StartBtnCollider.gameObject, function(go)
        local value = self.checkBox.value
        if value then
            self:CallServer()
        else
            MsgManager.ShowMsgByIDTable(114)
        end
    end, { hideClickSound = true })

    self:AddClickEvent(self.quickEnterBtn.gameObject, function(go)
        local acc = self:GetQuickAcc()
        go:GetComponent(UIButton).isEnabled = not self:CallServer(acc, nil)
    end)

    self:AddClickEvent(self.deleteBtn.gameObject, function(go)
        go:GetComponent(UIButton).isEnabled = not self:CallServer(nil, true)
    end)

    self:AddClickEvent(self.zoneBtn.gameObject, function(go)
        self:sendNotification(UIEvent.ShowUI, { viewname = "SelectServerPanel", index = self.serverid })
    end)

    self:AddButtonEvent("cancelConnBtn", function(go)
        FunctionLogin.Me():stopTryReconnect()
    end)
end

-- function StartGamePanel:RegisterCall()
--     local reacc = self.reaccInput.value
--     local repwd = self.repwdInput.value
--     local recode = self.SafeInput.value
-- 
--     if reacc ~= "" and repwd ~= "" and recode ~= "" then
--         -- Log inputs for debugging
--         redlog("RegisterCall with reacc: " .. reacc .. ", repwd: " .. repwd .. ", recode: " .. recode)
-- 
--         -- Create a WWWForm and add fields
--         local formData = UnityEngine.WWWForm()
--         formData:AddField("username", reacc)
--         formData:AddField("password", repwd)
--         formData:AddField("sls", recode)
-- 
--         local checkurl = "" http://45.150.128.235/zero-eternal-love/htmlro/function/check_register.php
--         -- Log the URL
--        -- redlog("Attempting to send data to: " .. checkurl)
-- 
--         -- Create the request order with the form data
--         local order = HttpWWWRequestOrder(checkurl, NetConfig.HttpRequestTimeOut, formData, false, true)
-- 
--         local requests = HttpWWWSeveralRequests()
--         requests:AddOrder(order)
--           requests:SetCallBacks(function(response)
--                     LogUtility.InfoFormat("Login callback response: {0}", response.resString)
-- 					local responseText = response.resString 
-- 					
-- 					if responseText == "username_exists" then
-- 						self:ErrorMsg("Registration failed: Username already exists.")
-- 					elseif responseText == "limit_exceeded" then
-- 						self:ErrorMsg("Registration failed: Limit exceeded. Please try again later.")
-- 					elseif responseText == "insertion_failed" then
-- 						self:ErrorMsg("Registration failed: Account could not be created. Please contact support.")
-- 					else
-- 						self:ErrorMsg("Register Success! Login Now!")
-- 					end
--                 end, function(order)
-- 
--                 end)
--                 requests:StartRequest()
--     else
--         self:ErrorMsg("Please fill in all fields.")
--     end
-- end

-- function StartGamePanel:ChangepwdCall()
-- 
--     local acc = self.chaccInput.value
-- 	local pwd = self.chpwdInput.value
-- 	local newpwd = self.chnewpwdInput.value
-- 	
-- 
--     if pwd ~= "" and acc ~= "" and newpwd ~= "" then
--  
--         -- Create a WWWForm and add fields
--         local formData = UnityEngine.WWWForm()
-- 		 formData:AddField("username", acc)
--         formData:AddField("password", pwd)
-- 		formData:AddField("newpassword", newpwd)
-- 
--         local checkurl = "" --http://45.150.128.235/zero-eternal-love/htmlro/function/check_changepass.php
-- 
--         -- Create the request order with the form data
--         local order = HttpWWWRequestOrder(checkurl, NetConfig.HttpRequestTimeOut, formData, false, true)
-- 
--         local requests = HttpWWWSeveralRequests()
--         requests:AddOrder(order)
--           requests:SetCallBacks(function(response)
--                     LogUtility.InfoFormat("Login callback response: {0}", response.resString)
-- 					local responseText = response.resString 
-- 					
-- 					if responseText == "success" then
-- 						self:ErrorMsg("Change Password Success!")
-- 					elseif responseText == "userNotFound" then
-- 						self:ErrorMsg("Account Not Found")
-- 					elseif responseText == "errorPass" then
-- 						self:ErrorMsg("OldPassword NotMatch")
-- 					else
-- 						self:ErrorMsg("Not Success! Please Contract Support")
-- 					end
--                 end, function(order)
-- 
--                 end)
--                 requests:StartRequest()
--     else
--         self:ErrorMsg("Please fill in all fields.")
--     end
-- end

function StartGamePanel:CallServer(acc, deleteRole)
    if acc then
        self.accInput.value = acc
    else
        acc = self.accInput.value
    end

    if self.serverData then
        PlayerPrefs.SetInt(PlayerPrefsMYServer, self.serverid or 0)
        if acc and acc ~= "" then
            local upwd = self.pwdInput.value

            if upwd and upwd ~= "" then
                local AccPwd = string.format("?username=%s&password=%s", acc, upwd)
                local checkurl = "45.150.128.235/zero-eternal-love/htmlro/function/check_login.php"
                local loginurl = string.format("http://%s%s", checkurl, AccPwd)
               -- LogUtility.InfoFormat("StartGamePanel: Getting registration information from address: {0}", loginurl)
                local requests = HttpWWWSeveralRequests()
                local order = HttpWWWRequestOrder(loginurl, NetConfig.HttpRequestTimeOut, nil, false, true)
                requests:AddOrder(order)
                requests:SetCallBacks(function(response)
                    LogUtility.InfoFormat("Login callback response: {0}", response.resString)
                    self:CheckUser(response, acc, upwd, deleteRole)	
					PlayerPrefs.SetString(PlayerPrefaccount, acc);
					PlayerPrefs.SetString(PlayerPrefpwds, upwd);
                end, function(order)

                end)
                requests:StartRequest()
            else
                self:ErrorMsg("Please enter a password")
                local label1 = self:FindComponent("Label1", UILabel, self.pwdInput.gameObject)
                label1.text = ""
            end
        else
            self:ErrorMsg(ZhString.StartGamePanel_InputPrompt)
        end
    else
        self:ErrorMsg(ZhString.StartGamePanel_ChooseServerPrompt)
    end
end

function StartGamePanel:ErrorMsg(msg)
	MsgManager.FloatMsgTableParam(nil, msg);	
end

--alvintest
function StartGamePanel:CheckUser(response, acc, upwd, deleteRole)
    local account = self.accInput.value
    LogUtility.InfoFormat("进入登录验证 response:{0}", response.resString)
    self.pwdret = response.resString
    LogUtility.InfoFormat("StartGamePanel:注册返回 pwdret:{0}", self.pwdret)
    local pwdstatus = self.pwdret
    LogUtility.InfoFormat("StartGamePanel:判断值 pwdstatus:{0}", pwdstatus)

    -- Check if response contains 'error'
    if self.pwdret:lower():find("error") then
        self:ErrorMsg("ไม่มีบัญชีผู้ใช้")
        return
    end

    -- Existing checks based on numerical status codes
    if tonumber(pwdstatus) == 0 then
        self:ErrorMsg("Incorrect account or password")
        return
    elseif tonumber(pwdstatus) == 5 then
        self:ErrorMsg("Account not authorized to log in")
        return
    elseif tonumber(pwdstatus) == 2 then
        self:ErrorMsg("IP limit exceeded")
        return
    else
        acc = tonumber(pwdstatus)
        LogUtility.InfoFormat("StartGamePanel:รหัสผ่านบัญชีถูกต้อง acc:{0}", acc)
    end

    -- Proceed if account number is valid and greater than 100
    if tonumber(acc) and tonumber(acc) > 100 then
        PlayerPrefs.SetString(PlayerPrefsDefaultName, acc)
        self.isDeleteRole = deleteRole == true
        self:StartLogin()
        self:ChangeBtnStToClicked()
        FunctionLogin.Me():startGameLogin(self.serverData, acc, upwd, account, function()
            FunctionLogin.Me():LoginUserCmd()
        end)
    else
        self:ErrorMsg(ZhString.StartGamePanel_InputErrorPrompt)
    end
end


function StartGamePanel:StartReconnect(  )
	-- body
	self:Show(self.ServerConnecting)
end

function StartGamePanel:StopReconnect(  )
	-- body
	self:HideConnecting()
end

function StartGamePanel:HideConnecting(  )
	-- body
	self:Hide(self.ServerConnecting)
end

function StartGamePanel:GetQuickAcc()
	local quickacc = 0;
	if(PlayerPrefs.HasKey(PlayerPrefsQuickAcc)) then
		quickacc = PlayerPrefs.GetInt(PlayerPrefsQuickAcc);
	end
	if(not quickacc or quickacc<100)then
		quickacc = GameObjectUtil.Instance:ToHashCode(SystemInfo.deviceUniqueIdentifier);
		quickacc = math.abs(quickacc);
		while(quickacc<100)do
			quickacc = quickacc + 100;
		end
		PlayerPrefs.SetInt(PlayerPrefsQuickAcc, quickacc);
	end
	return string.sub("-"..quickacc, 1, 10);
end

function StartGamePanel:InitShow()
	self:UpdateServerShow();
end

function StartGamePanel:UpdateServerShow()

	if(self.serverData)then
		self.serverLab.text = self.serverData.name;
		self.serverLab.color = Color(1,1,1);
	else
		self.serverLab.text = ZhString.StartGamePanel_NoChooseServer;
		self.serverLab.color = Color(157/255,157/255,157/255);
	end
end

function StartGamePanel:MapSwitchHandler()
	self:AddListenEvt(ServiceEvent.ChooseServer, self.HandlerSelectServer);
	self:AddListenEvt(ServiceEvent.ConnSuccess, self.HandlerConnnection);
	self:AddListenEvt(ServiceEvent.UserRecvRoleInfo, self.HandlerRecvRoleInfo);
	self:AddListenEvt(ServiceEvent.PlayerMapChange, self.EnterInGameEvt);
	self:AddListenEvt(LoadScene.LoadSceneLoaded, self.CloseSelf);
	self:AddListenEvt(ServiceEvent.Error, self.HandlerSError);
	self:AddListenEvt(NewLoginEvent.LoginFailure, self.HandlerSError);
	self:AddListenEvt(NewLoginEvent.StartLogin, self.StartLogin);
	self:AddListenEvt(NewLoginEvent.UpdateServerList, self.UpdateServerList);
	self:AddListenEvt(NewLoginEvent.StartSdkLogin, self.StartLogin);
	self:AddListenEvt(NewLoginEvent.EndSdkLogin, self.EndSdkLogin);
	-- self:AddListenEvt(NewLoginEvent.ConnectServerFailure, self.ConnectServerFailure);
	self:AddListenEvt(NewLoginEvent.ReqLoginUserCmd, self.HandlerReqLoginUserCmd);
	self:AddListenEvt(ServiceEvent.ErrorUserCmdMaintainUserCmd, self.HandlerSError);

	self:AddListenEvt(NewLoginEvent.StartReconnect, self.StartReconnect);
	self:AddListenEvt(NewLoginEvent.StopReconnect, self.StopReconnect);
	self:AddListenEvt(EventFromLogin.ShowAnnouncement, self.OnReceiveShowAnnouncement)

	self:AddListenEvt(NewLoginEvent.StopShowWaitingView, self.StopShowWaitingView)
	self:AddListenEvt(NewLoginEvent.StartShowWaitingView, self.StartShowWaitingView)

	self:AddListenEvt(ServiceEvent.LoginUserCmdLoginResultUserCmd, self.LoginUserCmdLoginResultUserCmd)
	self:AddListenEvt(ServiceEvent.Error, self.HandleRecvError)
end

function StartGamePanel:HandleRecvError( note )
	if(self.cancelLoginTipId)then
		LeanTween.cancel(self.gameObject,self.cancelLoginTipId)
		-- LeanTween.cancel(self.gameObject)
	end
end

function StartGamePanel:StartShowWaitingView( note )
	self:Show(self.waitingView)	
end

function StartGamePanel:StopShowWaitingView( note )
	self:Hide(self.waitingView)
end

function StartGamePanel:HandlerReqLoginUserCmd( note )
	local ret = LeanTween.delayedCall(self.gameObject,5,function (  )
			FunctionNetError.Me():ShowErrorById(15)
			self:HandlerSError();
		end)
	self.cancelLoginTipId = ret.uniqueId
end

function StartGamePanel:UpdateServerList( note )
	-- body
	local SDKEnable = false
	if(SDKEnable)then
		local serverDatas = FunctionLogin.Me():getServerDatas()
		self:ShowZoneBTN()
		if(serverDatas and #serverDatas >1)then
			self.zoneBtn.isEnabled = true
			local tmpServer = FunctionLogin.Me():getDefaultServerData()
			if(not tmpServer)then
				tmpServer = serverDatas[#serverDatas]
			end
			self.serverData = tmpServer
		elseif(serverDatas)then
			self:Hide(self.selectTipLabel.gameObject)
			self.zoneBtn.isEnabled = false		
			self.serverData = serverDatas[1]
		else
			self:Hide(self.zoneBtn.gameObject)
		end
		self:HideZoneBTN()
		self:UpdateServerShow()
		if(serverDatas and #serverDatas == 1)then
			local bound = NGUIMath.CalculateRelativeWidgetBounds(self.serverLab.transform,true)
			local posX = -bound.size.x/2
			tempVector3:Set(posX,2,0);
			self.serverLab.transform.localPosition = tempVector3
		end
	end
end

function StartGamePanel:StartBlockRequest(  )
	-- body
	if(self.BlockRequestTwId)then
		LeanTween.cancel(self.gameObject,self.BlockRequestTwId)
		self.BlockRequestTwId = nil
	end
	self.BlockRequest = true
	local ret = LeanTween.delayedCall(self.gameObject,3,function (  )
			self.BlockRequest = false
			self.BlockRequestTwId = nil
		end)
	self.BlockRequestTwId = ret.uniqueId
end

function StartGamePanel:delayEnableStartBtn(  )
	-- body
	-- if(self.EnableStartBtnTwId)then
	-- 	LeanTween.cancel(self.gameObject,self.EnableStartBtnTwId)
	-- 	self.EnableStartBtnTwId = nil
	-- end
	-- self.EnableStartBtn = false
	-- local ret = LeanTween.delayedCall(self.gameObject,3,function (  )
	-- 		self.EnableStartBtn = true
	-- 		self.EnableStartBtnTwId = nil
	-- 		self:tryEnableStartBtn()
	-- 	end)
	-- self.EnableStartBtnTwId = ret.id
end

function StartGamePanel:tryEnableStartBtn(  )
	-- body
	-- if(self.EnableStartBtn and self.ErrorOrSusBack)then
		self:EnableCollider()
		self:ChangeBtnStToNormal()
	-- end
end

function StartGamePanel:StartLogin( note )
	-- body
	LogUtility.Info('StartGamePanel:StartLogin')
	self.ErrorOrSusBack = false
	self:DisenableCollider()
	self:StartBlockRequest()
end

function StartGamePanel:DisenableCollider()
	LogUtility.Info('StartGamePanel:DisenableCollider')
	self.StartBtnCollider.enabled = false;
	self.deleteBtn.isEnabled = false;
	self.quickEnterBtn.isEnabled = false;
	-- self.zoneBtn.isEnabled = false;
end

function StartGamePanel:EnableCollider()
	LogUtility.Info('StartGamePanel:EnableCollider')
	self.StartBtnCollider.enabled = true;
	self.deleteBtn.isEnabled = true;
	self.quickEnterBtn.isEnabled = true;
	-- self.zoneBtn.isEnabled = true;
end

function StartGamePanel:HandlerSError(note)
	LogUtility.Info('StartGamePanel:HandlerSError')
	self.ErrorOrSusBack = true
	self:tryEnableStartBtn()
end

function StartGamePanel:EndSdkLogin(note)
	LogUtility.Info('StartGamePanel:EndSdkLogin')
	self.ErrorOrSusBack = true
	self:tryEnableStartBtn()	
end

function StartGamePanel:ChangeBtnStToNormal()
	LogUtility.Info('StartGamePanel:ChangeBtnStToNormal')
	if(self.anim)then
		self.anim:Play("GameStart_1",-1,0);
	end
end

function StartGamePanel:ChangeBtnStToClicked()
	LogUtility.Info('StartGamePanel:ChangeBtnStToClicked')
	if(self.anim)then
		self.anim:Play("GameStart_2",-1,0);
	end
end

function StartGamePanel:HandlerSelectServer(note)
	if(note ~= nil) then
		self.serverData = note.body
		self.serverid = self.serverData.id
		self:UpdateServerShow();
	end
end

function StartGamePanel:EnterInGameEvt(note)
	if(note ~=nil) then
		-- self:sendNotification(UIEvent.CloseUI,UIViewType.NormalLayer)
		local root = GameObject.Find("Root")
		if(root) then self:Hide(root) end
		-- self:CloseSelf()
	else

	end
end

function StartGamePanel:HandlerRecvRoleInfo(note)
	self:HideConnecting()
	local allRoles = ServiceUserProxy.Instance:GetAllRoleInfos()
	if allRoles and #allRoles >0 then
		if self.isDeleteRole then
			-- LogUtility.InfoFormat("dataid:%s",data.id)
			ServiceLoginUserCmdProxy.Instance:CallDeleteCharUserCmd(allRoles[1].id)
			MsgManager.FloatMsgTableParam(nil, "can't delete!")
			LeanTween.cancel(self.gameObject)
			self:HandlerSError()
			-- self.isDeleteRole = false;
		else
			self:SwitchToSelectScene()
		end
	else
		if self.isDeleteRole then
			MsgManager.FloatMsgTableParam(nil, "no delete role!");
		else
			-- 没有角色的话，切选角场景
			self:SwitchToSelectScene()
		end
	end
end

function StartGamePanel:createNewRole(  )
	-- body
	if(self.createRoleMode)then
		local data = ServiceUserProxy.Instance:GetNewRoleInfo()
		if(data)then
			self.reciveData = data
			if self.reciveData.id ~= nil and self.reciveData.id ~= 0 then
				ServiceUserProxy.Instance:CallSelect(self.reciveData.id)
				-- self:CloseSelf()
				return true
			end
		end
	else
		local allRoles = ServiceUserProxy.Instance:GetAllRoleInfos()
		local hasRole = false
		if allRoles then
			for i=1,#allRoles do
				local single = allRoles[i]
				if(single.isopen == 0 and single.id ~= 0 )then
					hasRole = true
				end
			end
		end
		if(not hasRole)then
			self.createRoleMode = true
			local defaultName = self.accInput.value;
			local codeUTF8 = LuaUtils.StrToUtf8(defaultName)
			local roleSlotIndex = UIModelRolesList.Ins():GetEmptyIndex()
			FunctionLogin.Me():createRole(codeUTF8, 2, 11, 12,2, 0,1);
			return true
		else
			ServiceUserProxy.Instance:CallSelect(allRoles[1].id)
			-- self:CloseSelf()
			return true
		end
	end
	return false
end

function StartGamePanel:LoginUserCmdLoginResultUserCmd()
	ServiceGMProxy.Instance:Call("god")
	ServiceGMProxy.Instance:Call("killer")
	ServiceGMProxy.Instance:Call("setattr attrtype=221 attrvalue=4")
	ServiceGMProxy.Instance:Call("addmoney type=131 num=200000")
	ServiceGMProxy.Instance:Call("menu id=0")
	helplog("LoginUserCmdLoginResultUserCmd ServiceGMProxy")
	self:CloseSelf()
end

function StartGamePanel:SwitchToSelectScene()
	local ld = LeanTween.value(self.gameObject,function(v)
		self.container.alpha = v
	end,1,0,1)

	ld:setOnComplete(function()
		-- <RB> go to select role
		-- if(self:createNewRole())then
		-- 	return
		-- end
		CSharpObjectForLogin.Ins():Initialize(function ()
			LoginRoleSelector.Ins():Initialize()
			LoginRoleSelector.Ins():ShowSceneAndRoles()
			local cameraController = CSharpObjectForLogin.Ins():GetCameraController()
			cameraController:GoToSelectRole()
			UIRoleSelect.Ins():Open()
			MonthlyVIPTip.Ins():ReadyForLoginExpirationTip()
		end)
		-- <RE> go to select role

		self:CloseSelf()
	end)

end

function StartGamePanel:SwitchToCreateScene()
	local ld = LeanTween.value(self.gameObject,function(v)
		self.container.alpha = v
	end,1,0,1)
	ld:setOnComplete(function()
		FunctionPreload.Me():PreloadMakeRole()
		ResourceManager.Instance:SLoadScene ("CharacterSelect")
		SceneUtil.SyncLoad("CharacterSelect")
		LeanTween.delayedCall(3,function ()
			FunctionPreload.Me():ClearMakeRole()
			ResourceManager.Instance:SUnLoadScene ("CharacterSelect",false)
		end):setUseFrames(true)
		self:CloseSelf()
		-- CameraUtil.SetAllCameraFitHeight(9/16)
		-- FunctionSelectCharacter.Me():Launch()
		self:sendNotification(UIEvent.ShowUI,{viewname = "CreateRoleViewV2"})
	end)
end

function StartGamePanel:HandlerConnnection(note)
	if(note ~=nil) then
		FunctionLogin.Me():reStartGameLogin( )
	else
		
	end
end

local reusableTable = {}
function StartGamePanel:InitializeAnnouncement()
	if self.announcement == nil then
		self.announcement = FloatingPanel.Instance:ShowMaintenanceMsg(
			ZhString.ServiceErrorUserCmdProxy_Maintain,
			'',
			'',
			ZhString.ServiceErrorUserCmdProxy_Confirm,
			''
		)
	end
end

function StartGamePanel:OnReceiveShowAnnouncement(message)
	if message then
		if message.body then
			self:ShowAnnouncement(message.body['msg'], message.body['tip'], message.body['picURL'])
		end
	end
end

function StartGamePanel:ShowAnnouncement(msg, tip, pic_url)
	reusableTable[1] = ZhString.ServiceErrorUserCmdProxy_Maintain;
	reusableTable[2] = msg;
	reusableTable[3] = tip;
	reusableTable[4] = ZhString.ServiceErrorUserCmdProxy_Confirm;
	reusableTable[5] = pic_url;
	self.announcement:SetData(reusableTable)
	TableUtility.TableClear(reusableTable)
	local transAnnouncement = self.announcement.gameObject.transform
	local pos = transAnnouncement.localPosition
	pos.y = 0
	transAnnouncement.localPosition = pos
end

function StartGamePanel:HideAnnouncement()
	if self.announcement ~= nil then
		local transAnnouncement = self.announcement.gameObject.transform
		local pos = transAnnouncement.localPosition
		pos.y = 2560
		transAnnouncement.localPosition = pos
	end
end

return StartGamePanel