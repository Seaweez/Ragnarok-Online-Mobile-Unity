autoImport("BagItemCell")
autoImport("WrapListCtrl")
autoImport("GemCell")
GemPackagePart = class("GemPackagePart", CoreView)
local localPosCache = LuaVector3.zero
local isSortOrderDescending

function GemPackagePart:ctor()
end

function GemPackagePart:CreateSelf(parent)
  if self.isInited == true then
    return
  end
  self.gameObject = self:LoadPreferb_ByFullPath("GUI/v1/part/GemPackagePart", parent, true)
  self:UpdateLocalPosCache()
  self:InitPart()
  self.isInited = true
end

function GemPackagePart:InitPart()
  self:InitItemScroll()
  self:InitItemCtrls()
  self:InitTabs()
  self:InitFilterCtrls()
  local hideFunc = function()
    GemProxy.CallBrowsePackage()
    self:Hide()
  end
  self:AddButtonEvent("CloseButton", hideFunc)
  self:AddButtonEvent("ArrangeBtn", function()
    self:TryArrange()
  end)
  self.attributePanelCtrl = self:FindGO("AttributePanel")
  self.patternGO = self:FindGO("pattern3")
  self.normalStick = self:FindComponent("NormalStick", UIWidget)
  self.closeComp = self.gameObject:GetComponent(CloseWhenClickOtherPlace)
  self.closeComp.callBack = hideFunc
end

function GemPackagePart:InitItemScroll()
  self.scrollView = self:FindComponent("ItemScrollView", ROUIScrollView)
  self.panel = self.scrollView.panel
end

function GemPackagePart:InitItemCtrls()
  self.itemContainer = self:FindGO("ItemContainer")
  self.listCtrl = WrapListCtrl.new(self.itemContainer, GemCell, "GemCell", WrapListCtrl_Dir.Vertical, 4, 102, true)
  self.listCtrl:AddEventListener(MouseEvent.MouseClick, self.OnClickCell, self)
  self.itemCells = self.listCtrl:GetCells()
end

function GemPackagePart:InitTabs()
  local tabParent = self:FindGO("Tabs")
  local sps = UIUtil.GetAllComponentsInChildren(tabParent, UISprite)
  for i = 1, #sps do
    sps[i]:MakePixelPerfect()
  end
  self:AddButtonEvent("AttributeTab", function()
    self:UpdatePage(SceneItem_pb.EPACKTYPE_GEM_ATTR)
  end)
  self:AddButtonEvent("SkillTab", function()
    self:UpdatePage(SceneItem_pb.EPACKTYPE_GEM_SKILL)
  end)
end

function GemPackagePart:InitFilterCtrls()
  self.attributeCtrl = self:FindGO("AttributeCtrl")
  self.skillCtrl = self:FindGO("SkillCtrl")
  self.attributeLvSortOrderTrans = self:FindGO("SortOrder").transform
  isSortOrderDescending = true
  self:AddButtonEvent("AttributeLvSort", function()
    isSortOrderDescending = not isSortOrderDescending
    local tempV3 = LuaGeometry.GetTempVector3(LuaGameObject.GetLocalEulerAngles(self.attributeLvSortOrderTrans))
    tempV3.z = (tempV3.z + 180) % 360
    self.attributeLvSortOrderTrans.localEulerAngles = tempV3
    self:UpdatePage()
  end)
  GemProxy.TryInitFilterPopOfView(self, "AttributeFilterPop", function()
    self:UpdatePage(SceneItem_pb.EPACKTYPE_GEM_ATTR)
  end, GemAttributeFilter)
  GemProxy.TryInitFilterPopOfView(self, "SkillClassFilterPop", function()
    self:UpdatePage(SceneItem_pb.EPACKTYPE_GEM_SKILL)
  end, GemSkillQualityFilter)
  GemProxy.TryInitFilterPopOfView(self, "SkillProfessionFilterPop", function()
    self:UpdatePage(SceneItem_pb.EPACKTYPE_GEM_SKILL)
  end, GemProxy.Instance.skillProfessionFilter, GemProxy.Instance.skillProfessionFilterData)
  GemProxy.TryAddFavoriteFilterToFilterPop(self.AttributeFilterPop)
  GemProxy.TryAddFavoriteFilterToFilterPop(self.SkillClassFilterPop)
end

local isNewComparer = function(data)
  return data.IsNew and data:IsNew()
end
local skillGemComparer = function(l, r)
  local comp1 = GemProxy.PredicateComparer(l, r, GemProxy.CheckIsEmbedded)
  if comp1 ~= nil then
    return comp1
  end
  local comp2 = GemProxy.PredicateComparer(l, r, GemProxy.CheckIsFavorite)
  if comp2 ~= nil then
    return comp2
  end
  local comp3 = GemProxy.PredicateComparer(l, r, isNewComparer)
  if comp3 ~= nil then
    return comp3
  end
  return GemProxy.BasicComparer(l, r)
end
local attrGemComparer = function(l, r)
  local comp1 = GemProxy.PredicateComparer(l, r, GemProxy.CheckIsEmbedded)
  if comp1 ~= nil then
    return comp1
  end
  local comp2 = GemProxy.PredicateComparer(l, r, GemProxy.CheckIsFavorite)
  if comp2 ~= nil then
    return comp2
  end
  local comp3 = GemProxy.PredicateComparer(l, r, isNewComparer)
  if comp3 ~= nil then
    return comp3
  end
  return GemProxy.GetAttributeItemDataLevelComparer(isSortOrderDescending)(l, r)
end

function GemPackagePart:UpdatePage(bagType, noResetPos)
  self.attributeCtrl:SetActive(false)
  self.skillCtrl:SetActive(false)
  self.attributePanelCtrl:SetActive(false)
  self.currentBagType = bagType or self.currentBagType or SceneItem_pb.EPACKTYPE_GEM_SKILL
  local bagItems, newPatternY, newPanelY, newPanelHeight
  if self.currentBagType == SceneItem_pb.EPACKTYPE_GEM_SKILL then
    if type(self.curSkillClassFilterPopData) == "function" then
      bagItems = GemProxy.GetSkillItemDataByQualityAndProfession(nil, self.curSkillProfessionFilterPopData)
      GemProxy.RemoveNotRequiredItemData(bagItems, self.curSkillClassFilterPopData)
    else
      bagItems = GemProxy.GetSkillItemDataByQualityAndProfession(self.curSkillClassFilterPopData, self.curSkillProfessionFilterPopData)
    end
    table.sort(bagItems, skillGemComparer)
    self.skillCtrl:SetActive(true)
    newPatternY = -243
    newPanelY = 0
    newPanelHeight = 442
  elseif self.currentBagType == SceneItem_pb.EPACKTYPE_GEM_ATTR then
    if type(self.curAttributeFilterPopData) == "function" then
      bagItems = GemProxy.GetAttributeItemData()
      GemProxy.RemoveNotRequiredItemData(bagItems, self.curAttributeFilterPopData)
    else
      bagItems = GemProxy.GetAttributeItemDataByType(self.curAttributeFilterPopData) or {}
    end
    table.sort(bagItems, attrGemComparer)
    self.attributeCtrl:SetActive(true)
    self.attributePanelCtrl:SetActive(true)
    newPatternY = -163
    newPanelY = 38
    newPanelHeight = 364
  end
  if not bagItems then
    LogUtility.Warning("Cannot update gem package when bagData = nil!")
    return
  end
  local tempV3 = LuaGeometry.GetTempVector3(LuaGameObject.GetLocalPosition(self.patternGO.transform))
  tempV3.y = newPatternY
  self.patternGO.transform.localPosition = tempV3
  local tmpClipRegion = self.panel.baseClipRegion
  tmpClipRegion.y = newPanelY
  tmpClipRegion.w = newPanelHeight
  self.panel.baseClipRegion = tmpClipRegion
  self.listCtrl:ResetDatas(bagItems, not noResetPos)
  self.scrollView.enabled = true
end

function GemPackagePart:UpdateInfo(noResetPos)
  self:UpdatePage(self.currentBagType or SceneItem_pb.EPACKTYPE_GEM_SKILL, noResetPos)
end

function GemPackagePart:TryArrange()
  self:sendNotification(UIEvent.JumpPanel, {
    view = PanelConfig.GemAskForArrangeRangePopUp
  })
end

function GemPackagePart:OnClickCell(cellCtl)
  local go = cellCtl and cellCtl.gameObject
  local data = cellCtl and cellCtl.data
  local newChooseId = data and data.id or 0
  if self.chooseId ~= newChooseId then
    self.chooseId = newChooseId
    self:ShowGemTip(go, data)
  else
    self.chooseId = 0
    TipManager.CloseTip()
  end
  for _, cell in pairs(self.itemCells) do
    cell:SetChoose(self.chooseId)
  end
  cellCtl:TryClearNewTag()
end

function GemPackagePart:ShowGemTip(cellGO, data)
  local tip = GemCell.ShowGemTip(cellGO, data, self.normalStick, nil, nil, function()
    self.chooseId = 0
    for _, cell in pairs(self.itemCells) do
      cell:SetChoose(self.chooseId)
    end
  end, true)
  if not tip then
    return
  end
  tip:AddIgnoreBounds(self.itemContainer)
  self:AddIgnoreBounds(tip.gameObject)
end

function GemPackagePart:SetPos(x, y, z)
  if self.gameObject then
    self.gameObject.transform.position = LuaGeometry.GetTempVector3(x, y, z)
    self:UpdateLocalPosCache()
  end
end

function GemPackagePart:UpdateLocalPosCache()
  localPosCache:Set(LuaGameObject.GetLocalPosition(self.gameObject.transform))
end

function GemPackagePart:SetLocalOffset(x, y, z)
  self.gameObject.transform.localPosition = LuaGeometry.GetTempVector3(localPosCache[1] + x, localPosCache[2] + y, localPosCache[3] + z)
end

function GemPackagePart:Show()
  if not self.isInited then
    LogUtility.Warning("Trying to show GemPackagePart without initializing it first.")
    return
  end
  self.gameObject:SetActive(true)
  self:UpdatePage()
  EventManager.Me():AddEventListener(ItemEvent.GemUpdate, self.OnGemUpdate, self)
end

function GemPackagePart:Hide()
  if not self.isInited then
    LogUtility.Warning("Trying to hide GemPackagePart without initializing it first.")
    return
  end
  self.gameObject:SetActive(false)
  EventManager.Me():RemoveEventListener(ItemEvent.GemUpdate, self.OnGemUpdate, self)
end

function GemPackagePart:OnGemUpdate()
  self:UpdatePage()
  TipManager.CloseTip()
end

function GemPackagePart:AddIgnoreBounds(obj)
  if self.gameObject and self.closeComp then
    self.closeComp:AddTarget(obj.transform)
  end
end
