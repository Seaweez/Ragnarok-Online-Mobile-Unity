autoImport("ExchangeBagSellCell")
autoImport("ShopMallExchangeSellingCombineCell")
autoImport("json")
if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
    autoImport("ShopMallNFTSellingCombineCell")
end
ShopMallExchangeSellView = class("ShopMallExchangeSellView",SubView)
ShopMallExchangeSellView.Instance = nil
ShopMallExchangeSellView.isLoading = false

function ShopMallExchangeSellView:OnExit()
	-- for i=1,#self.sellingWrapHelper:GetCellCtls() do
	-- 	self.sellingWrapHelper:GetCellCtls()[i]:OnDestroy()
	-- end
	local cells = self.sellingCombineList:GetCells()
	for i=1,#cells do
		cells[i]:OnDestroy()
	end
    
    if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
        local cells2 = self.sellingCombineList2:GetCells()
	    for i=1,#cells2 do
		    cells2[i]:OnDestroy()
	    end
    end
	
	ShopMallExchangeSellView.super.OnExit(self)
end

function ShopMallExchangeSellView:Init()
    ShopMallExchangeSellView.Instance = self
    self.nftSellData = {}
    self.metadataTable = {}
    self.listallmetadataTable = {}
    self.listownermetadataTable = {}
	self:FindObjs()
	self:AddEvts()
	self:AddViewEvts()
	self:InitShow()
  
end

local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

-- encoding
function base64Encode(data)
    return ((data:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

-- decoding
function base64Decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d%d%d%d%d%d', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

function ShopMallExchangeSellView:FindObjs()
	self.sellView = self:FindGO("SellView" , self.container.exchangeView)
	self.tipsLabel = self:FindGO("TipsLabel" , self.sellView):GetComponent(UILabel)
	self.sellingTitle = self:FindGO("SellingTitle" , self.sellView):GetComponent(UILabel)
	self.sellingScrollView = self:FindGO("SellingScrollView",self.sellView):GetComponent(UIScrollView)
	-- self.rateTitle = self:FindGO("RateTitle" , self.sellView):GetComponent(UILabel)
	self.bagSellContainer = self:FindGO("BagSellContainer" , self.sellView)
	self.sellingContainer = self:FindGO("SellingContainer" , self.sellView)

	self.sellingGrid = self.sellingContainer:GetComponent(UIGrid)

	---For NFT Sell
     if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
	    self.nftView = self:FindGO("NFTSellView" , self.container.exchangeView)
	    self.tipsLabel2 = self:FindGO("TipsLabel" , self.nftView):GetComponent(UILabel)
	    self.sellingTitle2 = self:FindGO("SellingTitle" , self.nftView):GetComponent(UILabel)
	    self.sellingScrollView2 = self:FindGO("SellingScrollView",self.nftView):GetComponent(UIScrollView)
	    -- self.rateTitle = self:FindGO("RateTitle" , self.nftView):GetComponent(UILabel)
	    self.bagSellContainer2 = self:FindGO("BagSellContainer" , self.nftView)
	    self.sellingContainer2 = self:FindGO("SellingContainer" , self.nftView)
        self.refresh = self:FindGO("RefreshBTN" , self.nftView)
        self.loadingwait = self:FindGO("Loaddingwait" , self.nftView)

	    self.sellingGrid2 = self.sellingContainer2:GetComponent(UIGrid)
        self.waitting = self:FindGO("Mintwait", self.nftView)
        self.scrollview = self:FindGO("BagSellScrollView", self.nftView)
        self.scrollviewsell = self:FindGO("SellingScrollView", self.nftView)
        
    end
	

end

function ShopMallExchangeSellView:AddEvts()
    if self.refresh then
        self:AddClickEvent(self.refresh, function(g)
            self:RefreshNFT()
        end)
    end
	self:AddListenEvt(ServiceEvent.RecordTradeMyPendingListRecordTradeCmd , self.RecvPendingList)
	self:AddListenEvt(ServiceEvent.RecordTradeListNtfRecordTrade , self.RecvListNtf)
end

function ShopMallExchangeSellView:AddViewEvts()
	self:AddListenEvt(ItemEvent.ItemUpdate,self.UpdateBagSell)
	self:AddListenEvt(ItemEvent.BarrowUpdate,self.UpdateBagSell)
end

function ShopMallExchangeSellView:InitShow()
	self.maxPendingCount = CommonFun.calcTradeMaxPendingCout(Game.Myself.data)

	self.bagSellWrapHelper = WrapListCtrl.new(self.bagSellContainer, ExchangeBagSellCell, "ExchangeBagSellCell", WrapListCtrl_Dir.Vertical, 4, 100)
	self.bagSellWrapHelper:AddEventListener(MouseEvent.MouseClick, self.ClickBagSell, self)

	self.sellingCombineList = ListCtrl.new(self.sellingGrid,ShopMallExchangeSellingCombineCell,"ShopMallExchangeSellingCombineCell")
	self.sellingCombineList:AddEventListener(MouseEvent.MouseClick, self.ClickSelling, self)

     if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then

        self.bagSellWrapHelper2 = WrapListCtrl.new(self.bagSellContainer2, ExchangeBagSellCell, "ExchangeBagSellCell", WrapListCtrl_Dir.Vertical, 4, 100)
        self.bagSellWrapHelper2:AddEventListener(MouseEvent.MouseClick, self.ClickBagSellNFT, self)

        self.sellingCombineList2 = ListCtrl.new(self.sellingGrid2,ShopMallNFTSellingCombineCell,"ShopMallNFTSellingCombineCell")
	    self.sellingCombineList2:AddEventListener(MouseEvent.MouseClick, self.ClickSelling, self)
    end

	self:UpdateBagSell()
	self:UpdateSelling()
  if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
       -- self:UpdateBagSellNFT()
    end
 if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
      --  SceneProxy.Instance:MarketplaceManager()
      --  SceneProxy.Instance:CreateNFTLoader()
  
    if not self.nftlist and not self.nftLoader then       
      --  self.nftlist = SceneProxy.Instance:GetMarketplaceManager()
      --  self.nftLoader = SceneProxy.Instance:GetNFTLoader()
    end   
end

	ServiceRecordTradeProxy.Instance:CallMyPendingListRecordTradeCmd( nil , Game.Myself.data.id)

	self.tipsLabel.text = ZhString.ShopMall_ExchangeSellTip
	-- self.rateTitle.text = string.format(ZhString.ShopMall_ExchangeRateTitle ,  tostring( GameConfig.Exchange.ExchangeRate * 100 ) )
end

function ShopMallExchangeSellView:UpdateBagSell()
    -- Load normal sell data
    local bagSellData = ShopMallProxy.Instance:GetExchangeBagSell()

    -- อัปเดตข้อมูลใน UI
    self.bagSellWrapHelper:ResetDatas(bagSellData)
end

function ShopMallExchangeSellView:Getlistmarket()
    return self.nftlist
end

function ShopMallExchangeSellView:GetNFT()
    return self.nftLoader
end


function ShopMallExchangeSellView:LogAllGUIDs()
    redlog("LogAllGUIDs: Listing all GUIDs in self.nftSellData")
    for i, item in ipairs(self.nftSellData) do
        if item.id then
            redlog(string.format("Item %d: GUID = %s, Item ID = %s", i, item.id, item.staticData and item.staticData.id or "N/A"))
        else
            redlog(string.format("Item %d: No GUID found", i))
        end
    end
end

function ShopMallExchangeSellView:RefreshNFT()
    local refreshProductID = "RefreshNFT" -- ใช้ชื่อที่ไม่ซ้ำกันสำหรับ ProductID

     if self.isLoading then
         MsgManager.ShowMsgByID(49)
        return
    end


    if PurchaseDeltaTimeLimit.Instance():IsEnd(refreshProductID) then
        redlog("Refreshing NFT data...")
        self.waitting:SetActive(true)
        self.scrollview:SetActive(false)
        self.scrollviewsell:SetActive(false)
       -- self:UpdateListAllSellNFT()
        self:UpdateListOwnerSellNFT()
        -- อัปเดต UI ใหม่หลังจากโหลดข้อมูล
        -- self.bagSellWrapHelper2:ResetDatas(self.nftSellData)

        -- เริ่มหน่วงเวลาใหม่
        local interval = 5 -- หน่วงเวลา 10 วินาที หรือเปลี่ยนตามที่คุณต้องการ
        PurchaseDeltaTimeLimit.Instance():Start(refreshProductID, interval)
    else
        MsgManager.ShowMsgByID(49) -- แสดงข้อความแจ้งเตือนหากยังไม่หมดเวลา
    end
end

function ShopMallExchangeSellView:allNFT()
    self:RefreshNFT()
end

function ShopMallExchangeSellView:UpdateListOwnerSellNFT()
 if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
 
    if not self.nftlist then
        SceneProxy.Instance:MarketplaceManager()
        self.nftlist = SceneProxy.Instance:GetMarketplaceManager()
    end
end
    self.nftlist.metadataTable = {}
    TableUtility.TableClear(self.nftlist.metadataTable)

    if self.nftlist then
        self.nftlist:OnClickLoadListingsAndMetadataCreator(function()
            if self.nftlist.metadataTable ~= nil then
                self.listallmetadataTable = {}
                local listingTable = self.nftlist.metadataTable
                local itemInfoList = {}
                TableUtility.TableClear(itemInfoList)
                TableUtility.TableClear(self.listallmetadataTable)

                for i = 1, #listingTable do
                    local metadataJson = listingTable[i]
                    local metadata = json.decode(metadataJson)

                    if metadata and metadata.asset and metadata.asset.attributes and metadata.asset.attributes.item_data then
                        local itemData = base64Decode(metadata.asset.attributes.item_data)
                        self.MarketserverOwnItem = SceneItem_pb.ItemData()
                        self.MarketserverOwnItem:ParseFromString(itemData)

                        local itemInfo = {
                            itemid = tonumber(metadata.asset.attributes.itemid),
                            price = tonumber(metadata.currencyValuePerToken.value),
                            count = tonumber(metadata.asset.attributes.count),
                            refine_lv = tonumber(self.MarketserverOwnItem.equip.refinelv),
                            item_data = self.MarketserverOwnItem,
                            isExpired = nil,
                            isNFT = true,
                            Listid = tonumber(metadata.id),
                            ListStatus = tonumber(metadata.status),
                            publicityId = nil
                        }

                        local shopMallItem = ShopMallItemData.new(itemInfo)
                        table.insert(itemInfoList, shopMallItem)
                    end

                    table.insert(self.listallmetadataTable, metadata)
                end

                local organizedData = self:ReUniteCellData(itemInfoList, 2)
                self.waitting:SetActive(false)
                self.scrollview:SetActive(true)
                self.scrollviewsell:SetActive(true)
                self:UpdateBagSellNFT()
                self.sellingCombineList2:ResetDatas(organizedData)
            end
        end)
    end
end

function ShopMallExchangeSellView:Getmetadata()
    return self.listallmetadataTable
end

function ShopMallExchangeSellView:UpdateBagSellNFT()

    self.nftlist:OnClickCheckApprovalStatus()

    self.loadingwait:SetActive(true)
    self.bagSellContainer2:SetActive(false)
    self.isLoading = true

    TableUtility.TableClear(self.metadataTable)

    local function onLoadingStatusChanged(isLoading)
        if not isLoading then
            self.loadingwait:SetActive(false)
            self.bagSellContainer2:SetActive(true)
            self.nftLoader:UpdateMetadata(self.metadataTable)

            if self.metadataTable and type(self.metadataTable) == "table" and #self.metadataTable > 0 then
                TableUtility.TableClear(self.nftSellData)

                for i, metadataJson in ipairs(self.metadataTable) do
                    local metadata = json.decode(metadataJson)
                    if metadata and metadata.attributes then
                        self.attributes = metadata.attributes
                        self.tokenid = metadata.id

                        if not self.attributes.guid or self.attributes.guid == "" then
                            return
                        end

                        local foundInOwnerSell = false
                        for _, ownerMetadata in ipairs(self.listallmetadataTable or {}) do
                            if ownerMetadata.asset.id == self.tokenid then
                                foundInOwnerSell = true
                                break
                            end
                        end

                        if not foundInOwnerSell then
                            local itemData = ShopSaleProxy.Instance:GetItemByGuid(self.attributes.guid)
                            if not itemData then
                                local decodedItemData = base64Decode(self.attributes.item_data)
                                self.serverItem = SceneItem_pb.ItemData()
                                self.serverItem:ParseFromString(decodedItemData)

                                if self.serverItem.base then
                                    self.serverItem.base.guid = self.attributes.guid
                                else
                                    return
                                end

                                itemData = ItemData.new(self.serverItem.base.guid, self.serverItem.base.id)
                                itemData:ParseFromServerData(self.serverItem)

                                table.insert(self.nftSellData, itemData)
                            end
                        end
                    end
                end

                self.bagSellWrapHelper2:ResetDatas(self.nftSellData)
            else
                self.loadingwait:SetActive(false)
                self.bagSellContainer2:SetActive(true)
            end
            self.isLoading = false
        end
    end

    self.nftLoader:RegisterLoadingStatusCallback(onLoadingStatusChanged)
    self.nftLoader:LoadNFTsOwnedByUser()
end

function ShopMallExchangeSellView:RemoveItemByGuid(guid)
    redlog("RemoveItemByGuid: Attempting to remove item with GUID:", guid)
    local found = false
    local removedItem = nil
    local associatedTokenId = "N/A" -- Default value if no tokenId is found

    for i = #self.nftSellData, 1, -1 do
        if self.nftSellData[i].id == guid then
            removedItem = self.nftSellData[i]
            table.remove(self.nftSellData, i)
            found = true

            -- ค้นหา tokenId ที่เชื่อมโยงกับ GUID ที่กำลังลบใน metadataTable
            for _, metadataJson in ipairs(self.metadataTable) do
                local metadata = json.decode(metadataJson)
                if metadata and metadata.attributes and metadata.attributes.guid == guid then
                    associatedTokenId = metadata.id
                    break
                end
            end

            break
        end
    end

    if removedItem then
        redlog(string.format("RemoveItemByGuid: Removed item with GUID: %s, Token ID: %s, Item ID: %s", 
            removedItem.id, associatedTokenId, removedItem.staticData and removedItem.staticData.id or "N/A"))
    else
        redlog("RemoveItemByGuid: No item found with the given GUID")
    end

    self.bagSellWrapHelper2:ResetDatas(self.nftSellData)
    redlog("RemoveItemByGuid: Successfully removed item and updated UI")
end


 function ShopMallExchangeSellView:UpdateSelling()
 	local sellingData = ShopMallProxy.Instance:GetExchangeSelfSelling()

 	self.sellingTitle.text = string.format(ZhString.ShopMall_ExchangeSellTitle,tostring(#sellingData),tostring(self.maxPendingCount))
	local newData = self:ReUniteCellData(sellingData, 2)
	-- self.sellingWrapHelper:UpdateInfo(newData)
	self.sellingCombineList:ResetDatas(newData)
 end

function ShopMallExchangeSellView:ClickBagSell(cellCtl)
    if cellCtl.data == nil then
       -- redlog("Error: cellCtl.data is nil")
        return
    end

   -- local viewdata = {data = cellCtl.data, serverItem = self.serverItem, view = self, type = ShopMallExchangeSellEnum.Sell}
    --self:sendNotification(UIEvent.JumpPanel, {view = PanelConfig.ShopMallExchangeSellInfoView, viewdata = viewdata})

   -- MsgManager.ConfirmMsgByID(25999,
				--function()
                      local viewdata = {data = cellCtl.data, serverItem = self.serverItem, view = self, type = ShopMallExchangeSellEnum.Sell}
					  self:sendNotification(UIEvent.JumpPanel, {view = PanelConfig.ShopMallExchangeSellInfoView, viewdata = viewdata})
				--end,
				--function()
                  --    local viewdata = {data = cellCtl.data, serverItem = self.serverItem, view = self, type = ShopMallExchangeSellEnum.SellNFT}
					--  self:sendNotification(UIEvent.JumpPanel, {view = PanelConfig.ShopMallExchangeSellInfoView, viewdata = viewdata})
				--end,
				--nil
	--)
end

function ShopMallExchangeSellView:ClickBagSellNFT(cellCtl)
    if cellCtl.data == nil then
       -- redlog("Error: cellCtl.data is nil")
        return
    end
    
  
    local viewdata = {data = cellCtl.data, serverItem = self.serverItem, view = self, type = ShopMallExchangeSellEnum.SellNFT, nft = true}
    self:sendNotification(UIEvent.JumpPanel, {view = PanelConfig.ShopMallExchangeSellInfoView, viewdata = viewdata})
end


function ShopMallExchangeSellView:ClickSelling(cellCtl)
    local data = cellCtl.data
    if data == nil then
        return
    end

    local type = nil

    if data:CanExchange() and data.isExpired then
        type = ShopMallExchangeSellEnum.Resell
    else
        if data.isNFT then
            type = ShopMallExchangeSellEnum.CancelList
        else
            type = ShopMallExchangeSellEnum.Cancel
        end
    end

    local itemData = data:GetItemData()
    self:sendNotification(UIEvent.JumpPanel, {view = PanelConfig.ShopMallExchangeSellInfoView, viewdata = { cell = cellCtl ,data = itemData , type = type}})
end


function ShopMallExchangeSellView:RecvPendingList()
	self:UpdateSelling()
end

function ShopMallExchangeSellView:RecvListNtf(note)
	local data = note.body
	if data.trade_type == BoothProxy.TradeType.Exchange and data.type == RecordTrade_pb.ELIST_NTF_MY_PENDING then
		ServiceRecordTradeProxy.Instance:CallMyPendingListRecordTradeCmd( nil , Game.Myself.data.id)
	end
end

function ShopMallExchangeSellView:ReUniteCellData(datas, perRowNum)
	local newData = {}
	if(datas~=nil and #datas>0)then
		for i = 1,#datas do
			local i1 = math.floor((i-1)/perRowNum)+1;
			local i2 = math.floor((i-1)%perRowNum)+1;
			newData[i1] = newData[i1] or {};
			if(datas[i] == nil)then
				newData[i1][i2] = nil;
			else
				newData[i1][i2] = datas[i];
			end
		end
	end
	return newData;
end