autoImport("ShopMallNFTTypesCombineCell")
autoImport("ShopMallNFTClassifyCombineCell")
autoImport("ShopMallNFTDetailCombineCell")
autoImport("ExchangeClassifyData")
autoImport("json")

ShopMallExchangeBuyNFTView = class("ShopMallExchangeBuyNFTView",SubView)

ShopMallExchangeBuyNFTView.Instance = nil;

function ShopMallExchangeBuyNFTView:OnExit()
	if self.safeLT then
		self.safeLT:cancel()
		self.safeLT = nil
	end

	
	for i=1,#self.detailWrapHelper:GetCellCtls() do
		self.detailWrapHelper:GetCellCtls()[i]:OnDestroy()
	end
	
	ShopMallExchangeBuyNFTView.super.OnExit(self)
end

function ShopMallExchangeBuyNFTView:Init()
	self:FindObjs()
	self:InitShow()
	self:AddEvts()
	if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
		self:AddViewEvts()
	end
	if(ShopMallExchangeBuyNFTView.Instance == nil) then
		ShopMallExchangeBuyNFTView.Instance = self
	end
end

function ShopMallExchangeBuyNFTView:FindObjs()
	self.buyView = self:FindGO("BuyNFTView", self.container.exchangeView)
	self.searchBtn = self:FindGO("SearchBtn", self.buyView)
	self.typesTable = self:FindGO("TypesTable", self.buyView):GetComponent(UITable)
	self.money = self:FindGO("Money", self.buyView):GetComponent(UILabel)
	self.classify = self:FindGO("Classify" , self.buyView)
	self.detail = self:FindGO("Detail", self.buyView)
	self.turnLeft = self:FindGO("TurnLeft", self.buyView)
	self.turnRight = self:FindGO("TurnRight", self.buyView)
	self.page = self:FindGO("Page", self.buyView):GetComponent(UILabel)
	self.pageInput = self:FindGO("TurnPage"):GetComponent(UIInput)
	UIUtil.LimitInputCharacter(self.pageInput, 4)
	self.buyButton = self:FindGO("BuyButton", self.buyView)
	self.returnButton = self:FindGO("ReturnButton", self.buyView)
	self.refreshBtn = self:FindGO("Refreshlist", self.buyView)

	self.selfProfession = self:FindGO("SelfProfession2" , self.classify):GetComponent(UIToggle)
	self.selfProfessionRoot = self:FindGO("SelfProfessionRoot2")
	self.levelFilter = self:FindGO("LevelFilter2", self.classify):GetComponent(UIPopupList)
	self.levelFilterRoot = self:FindGO("LevelFilterRoot2")
	self.fashionFilter = self:FindGO("FashionFilter2", self.classify):GetComponent(UIPopupList)
	self.fashionFilterRoot = self:FindGO("FashionFilterRoot2")
	self.classifyTitle = self:FindGO("ClassifyTitle", self.classify):GetComponent(UILabel)
	self.classifyScrollView = self:FindGO("ClassifyScrollView2"):GetComponent(ROUIScrollView)
	self.classifyContainer = self:FindGO("ClassifyContainer", self.classify)
	self.waitting = self:FindComponent("Waitting", UILabel)
	self.emptyClassify = self:FindGO("Empty", self.classify)
	self.emptyLabelClassify = self:FindGO("EmptyLabel", self.classify):GetComponent(UILabel)

	self.tradeFilter = self:FindGO("TradeFilter", self.detail):GetComponent(UIPopupList)
	self.refineSortBtn = self:FindGO("RefineSortBtn", self.detail)
	self.priceSortBtn = self:FindGO("PriceSortBtn", self.detail)
	self.refineSortLabel = self:FindGO("RefineSortLabel", self.detail):GetComponent(UILabel)
	self.priceSortLabel = self:FindGO("PriceSortLabel", self.detail):GetComponent(UILabel)
	self.detailContainer = self:FindGO("DetailContainer", self.detail)
	self.emptyDetail = self:FindGO("Empty", self.detail)
	self.nftClassify = {}
end

function ShopMallExchangeBuyNFTView:AddEvts()


	 self:AddClickEvent(self.refreshBtn, function(g)
		self.isLoadding = false
        self:UpdateListAllSellNFT()
    end)

	self:AddClickEvent(self.searchBtn,function (g)
		self:ClickSearchBtn()
	end)
	self:AddClickEvent(self.turnLeft,function (g)
		self:ClickTurnLeft()
	end)	
	self:AddClickEvent(self.turnRight,function (g)
		self:ClickTurnRight()
	end)
	EventDelegate.Set(self.pageInput.onSubmit,function ()
		self:PageInputOnSubmit()
	end)
	self:AddClickEvent(self.buyButton,function (g)
		self:ClickBuyButton()
	end)
	self:AddClickEvent(self.returnButton,function (g)
		self:ClickReturnButton()
	end)
	self:AddClickEvent(self.refineSortBtn,function (g)
		self:ClickRefineSortBtn()
	end)
	self:AddClickEvent(self.priceSortBtn,function (g)
		self:ClickPriceSortBtn()
	end)
	EventDelegate.Add(self.selfProfession.onChange, function ()
		if self.isSelfProfession ~= self.selfProfession.value then
			self.isSelfProfession = self.selfProfession.value
			self:UpdateClassifyBySelfProfessionAndLevelFilter()
		end
	end)
	EventDelegate.Add(self.levelFilter.onChange, function()
		if self.levelFilter.data == nil then
			return
		end
		if self.filter == ShopMallFilterEnum.Level then
			if self.levelFilterData ~= self.levelFilter.data then
				self.levelFilterData = self.levelFilter.data
				self:CallClassify()
			end
		end
	end)
	EventDelegate.Add(self.fashionFilter.onChange, function()
		if self.fashionFilter.data == nil then
			return
		end
		if self.filter == ShopMallFilterEnum.Fashion then
			if self.fashionFilterData ~= self.fashionFilter.data then
				self.fashionFilterData = self.fashionFilter.data
				self:CallClassify()
			end
		end
	end)
	EventDelegate.Add(self.tradeFilter.onChange, function()
		if self.tradeFilter.data == nil then
			return
		end
		if self.tradeFilterData ~= self.tradeFilter.data then
			self.tradeFilterData = self.tradeFilter.data
			self:CallDetailList()
		end
	end)

	local scrollView = self:FindGO("DetailScrollView2"):GetComponent(UIScrollView)
	NGUIUtil.HelpChangePageByDrag(scrollView, function ()
		self:ClickTurnLeft()
	end, function ()
		self:ClickTurnRight()
	end, 50)

	self.classifyScrollView.OnBackToStop = function ()
		self.waitting.text = ZhString.ShopMall_ExchangeRefreshing
	end
	self.classifyScrollView.OnStop = function ()
		if self.currentTypeData then

			if self.safeLT then
				self.safeLT:cancel()
				self.safeLT = nil
			end
			self.safeLT = LeanTween.delayedCall(3, function ()
				self.safeLT = nil
				-- self:UpdateClassify2()
			end)

			self:CallClassify()
		end
	end
	self.classifyScrollView.OnPulling = function (offsetY, triggerY)
		self.waitting.text = offsetY<triggerY and ZhString.ShopMall_ExchangePullRefresh or ZhString.ShopMall_ExchangeCanRefresh
	end
	self.classifyScrollView.OnRevertFinished = function ()
		self.waitting.text = ZhString.ShopMall_ExchangePullRefresh
	end
end

local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

-- encoding
function base64Encode(data)
    return ((data:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

-- decoding
function base64Decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d%d%d%d%d%d', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end


function ShopMallExchangeBuyNFTView:AddViewEvts()
	self:AddListenEvt(MyselfEvent.MyDataChange , self.UpdateRoleData)
	--self:AddListenEvt(ServiceEvent.NFTRecordTradeBriefPendingListRecordTradeCmd , self.UpdateListAllSellNFT)
	--self:AddListenEvt(ServiceEvent.RecordTradeHotItemidRecordTrade , self.UpdateListAllSellNFT)
end

function ShopMallExchangeBuyNFTView:InitShow()

	self.isSelfProfession = true
	self.isRefineSortDes = true
	self.isPriceSortDes = false

	if GameConfig.SystemForbid.Booth then
		self.tradeFilter.gameObject:SetActive(false)
	end

	self.rolelevel = MyselfProxy.Instance:RoleLevel()
	self.rankType = RecordTrade_pb.RANKTYPE_ITEM_PRICE_INC
	ShopMallProxy.Instance:ResetExchangeBuyClassify()
	self:ResetPage()

	self:ShowClassifyView(true)

	self.typesListCtl = UIGridListCtrl.new(self.typesTable , ShopMallNFTTypesCombineCell , "ShopMallNFTTypesCombineCell")
	self.typesListCtl:AddEventListener(MouseEvent.MouseClick , self.ClickTypes, self)
	self.typesListCtl:AddEventListener(ShopMallEvent.ExchangeClickFatherTypes , self.ClickFatherTypes, self)

	local data = {
		wrapObj = self.classifyContainer, 
		pfbNum = 5, 
		cellName = "ShopMallNFTClassifyCombineCell", 
		control = ShopMallNFTClassifyCombineCell, 
		dir = 1,
	}
	self.classifyWrapHelper = WrapCellHelper.new(data)	
	self.classifyWrapHelper:AddEventListener(MouseEvent.MouseClick, self.ClickClassify, self)

	TableUtility.TableClear(data)
	data.wrapObj = self.detailContainer
	data.pfbNum = 5
	data.cellName = "ShopMallNFTDetailCombineCell"
	data.control = ShopMallNFTDetailCombineCell
	data.dir = 1

	self.detailWrapHelper = WrapCellHelper.new(data)	
	self.detailWrapHelper:AddEventListener(MouseEvent.MouseClick, self.ClickDetail, self)

	self:UpdateTypes()
	if self.viewdata.viewdata and self.viewdata.viewdata.searchId then
		self:SelectTypes(self.viewdata.viewdata.searchId)
	else
		-- self:InitTypes()

		self.selfProfessionRoot:SetActive(false)
		self.levelFilterRoot:SetActive(false)
		self.fashionFilterRoot:SetActive(false)
		self.classifyTitle.gameObject:SetActive(false)
		self.classifyScrollView.enabled = false
	end

	self:InitFilter()
	-- self:UpdateClassify()
	--self:UpdateGold()

	if self.viewdata.viewdata and self.viewdata.viewdata.searchId then	
		TableUtility.TableClear(data)
		data.data = self.viewdata.viewdata.searchId	
		self:ClickClassify(data)
	end
end

-- 开始默认选中第一个大类别，第一个小类别
function ShopMallExchangeBuyNFTView:InitTypes()
	--选中第一个大类别
	local typesCells = self.typesListCtl:GetCells()
	if #typesCells > 0 then
		local cellCtl = typesCells[1]
		cellCtl:ClickFather(cellCtl)

		--选中第一个小类别
		local childData = ShopMallProxy.Instance:GetExchangeBuyChildTypes(cellCtl.data.id)
		if childData then
			local childCells = cellCtl.childCtl:GetCells()
			if #childCells > 0 then
				local childCellCtl = cellCtl.childCtl:GetCells()[1]
				cellCtl:ClickChild(childCellCtl)
			end
		end
	end
end

function ShopMallExchangeBuyNFTView:InitFilter()
	self.levelFilter:Clear()
	self.fashionFilter:Clear()
	self.tradeFilter:Clear()

	--初始化等级筛选
	local rangeList = ShopMallProxy.Instance:GetExchangeFilter(GameConfig.Exchange.ExchangeLevel)
	for i=1,#rangeList do
		local rangeData = GameConfig.Exchange.ExchangeLevel[rangeList[i]]
		local str
		if rangeData.name then
			str = rangeData.name
		else
			str = string.format(ZhString.ShopMall_ExchangeLevelFilter,tostring(rangeData.minlv),tostring(rangeData.maxlv))
		end
		self.levelFilter:AddItem(str , rangeList[i])
	end
	if #rangeList > 0 then
		local range = rangeList[1]
		self.levelFilterData = range
		local rangeData = GameConfig.Exchange.ExchangeLevel[range]
		if rangeData.name then
			self.levelFilter.value = rangeData.name
		else
			self.levelFilter.value = string.format(ZhString.ShopMall_ExchangeLevelFilter,tostring(rangeData.minlv),tostring(rangeData.maxlv))
		end
	end

	--初始化时装筛选
	rangeList = ShopMallProxy.Instance:GetExchangeFilter(GameConfig.Exchange.ExchangeFashion)
	for i=1,#rangeList do
		local rangeData = GameConfig.Exchange.ExchangeFashion[rangeList[i]]
		self.fashionFilter:AddItem(rangeData , rangeList[i])
	end
	if #rangeList > 0 then
		local range = rangeList[1]
		self.fashionFilterData = range
		local rangeData = GameConfig.Exchange.ExchangeFashion[range]
		self.fashionFilter.value = rangeData
	end

	--初始化交易类型筛选
	rangeList = ShopMallProxy.Instance:GetExchangeFilter(GameConfig.Exchange.ExchangeTrade)
	for i=1,#rangeList do
		local rangeData = GameConfig.Exchange.ExchangeTrade[rangeList[i]]
		self.tradeFilter:AddItem(rangeData , rangeList[i])
	end
	if #rangeList > 0 then
		local range = rangeList[1]
		self.tradeFilterData = range
		local rangeData = GameConfig.Exchange.ExchangeTrade[range]
		self.tradeFilter.value = rangeData
	end
end

function ShopMallExchangeBuyNFTView:SelectTypes(itemId)
	local parent,child = ShopMallProxy.Instance:GetExchangeParentAndChildType(itemId)
	if parent then
		--选中大类别
		local parentCell = self:GetParentTypeCellById(parent)
		if parentCell then
			parentCell:ClickFather(parentCell,true)

			--选中小类别
			if child then
				local childCell = self:GetChildTypeCellById(parentCell,child)
				if childCell then
					parentCell:ClickChild(childCell)
				end
			end
		end
	end
end

function ShopMallExchangeBuyNFTView:ClickSearchBtn()
	self:sendNotification(UIEvent.JumpPanel, {view = PanelConfig.ShopMallExchangeSearchView})
end

function ShopMallExchangeBuyNFTView:ClickTurnLeft()
	local page = self.currentPage - 1
	if page >= 1 then
		self.currentPage = page

		self:CallDetailList()
	end
end

function ShopMallExchangeBuyNFTView:ClickTurnRight()
	self.currentPage = self.currentPage + 1

	self:CallDetailList()
end

function ShopMallExchangeBuyNFTView:PageInputOnSubmit()
	if #self.pageInput.value > 0 then
		local value = tonumber(self.pageInput.value)
		local totalPage = ShopMallProxy.Instance:GetExchangeBuyDetailTotalPageCount()

		if value < 1 then
			value = 1
		elseif value > totalPage then
			value = totalPage
		end
		self.currentPage = value

		self:UpdatePage()
		self:CallDetailList()
	end
end

function ShopMallExchangeBuyNFTView:ClickBuyButton()
	if self.currentDetalCell and self.currentDetalCell.data then
		self:sendNotification(UIEvent.JumpPanel, {view = PanelConfig.ShopMallExchangeBuyInfoView, viewdata = { data = self.currentDetalCell.data}})
	else
		MsgManager.ShowMsgByIDTable(10114)
	end
end

function ShopMallExchangeBuyNFTView:ClickReturnButton()
	self:ShowClassifyView(true)
end

function ShopMallExchangeBuyNFTView:ClickRefineSortBtn()
	if self:CheckLimitCallDetail() then
		return
	end

	local icon = ""

	self.isRefineSortDes = not self.isRefineSortDes

	if self.isRefineSortDes then
		icon = ZhString.ShopMall_ExchangeSortDes
		self.rankType = RecordTrade_pb.RANKTYPE_REFINE_LV_INC
	else
		icon = ZhString.ShopMall_ExchangeSortInc
		self.rankType = RecordTrade_pb.RANKTYPE_REFINE_LV_DES
	end

	self:CallDetailList()
	self:SetLimitCallDetail()

	self.refineSortLabel.text = ZhString.ShopMall_ExchangeRefine..icon	
end

function ShopMallExchangeBuyNFTView:ClickPriceSortBtn()
	if self:CheckLimitCallDetail() then
		return
	end

	local icon = ""

	self.isPriceSortDes = not self.isPriceSortDes

	if self.isPriceSortDes then
		icon = ZhString.ShopMall_ExchangeSortDes
		self.rankType = RecordTrade_pb.RANKTYPE_ITEM_PRICE_INC
	else
		icon = ZhString.ShopMall_ExchangeSortInc
		self.rankType = RecordTrade_pb.RANKTYPE_ITEM_PRICE_DES
	end

	self:CallDetailList()
	self:SetLimitCallDetail()

	self.priceSortLabel.text = ZhString.ShopMall_ExchangePrice..icon		
end

function ShopMallExchangeBuyNFTView:ClickTypes(cellCtl)
	if cellCtl.data then

		if self.nowFather then
			self:UpdateClassifyOption(self.nowFather.cellCtl)
		end

		self:ShowClassifyView(true)

		self.classifyTitle.text = string.format(ZhString.ShopMall_ExchangeClassify,cellCtl.data.name)

		self.currentTypeData = cellCtl.data

		self:ResetPage()

		if self.nowTypes ~= cellCtl then			
			self:ResetSelfProfession()
			self:UpdateClassifyBySelfProfessionAndLevelFilter()
		else
			self:CallClassify()
		end
		self.nowTypes = cellCtl
	end
end

function ShopMallExchangeBuyNFTView:ClickFatherTypes(param)
	if self.nowFather then
		if param.cellCtl ~= self.nowFather.cellCtl then
			self.nowFather.combine:SetChoose(false)
			if self.nowFather.combine.animDir then
				self.nowFather.combine:PlayAnim(not self.nowFather.combine.animDir)
			end
		end		
	end
	self.nowFather = param
	self.nowFather.combine:SetChoose(true)
end

function ShopMallExchangeBuyNFTView:ClickClassify(cellCtl,id)
	if cellCtl.data then
		self:ShowClassifyView(false)

		if id == nil then
			id = cellCtl.data.id
		end
		self.currentDetailId = id
		self:ResetRank()
		self:ResetPage()
		self:CallDetailList()
		ShopMallProxy.Instance:ResetExchangeBuyDetail()
		self:NFTBuyDetail({lists = self.lists2})
		self:UpdateDetail(true)
	--	self:UpdateGold()

		self:UpdateDetailOption(cellCtl)
	end
end

function ShopMallExchangeBuyNFTView:ClickDetail(cellCtl)
	if self.currentDetalCell and self.currentDetalCell ~= cellCtl then
		self.currentDetalCell:SetChoose(false)
	end

	cellCtl:SetChoose(true)
	self.currentDetalCell = cellCtl
end



function ShopMallExchangeBuyNFTView:UpdateClassifyBySelfProfessionAndLevelFilter()

	self:CallClassify()
end

-- 左侧购买类别
function ShopMallExchangeBuyNFTView:UpdateTypes()
	local types = ShopMallProxy.Instance:GetExchangeBuyParentTypes()
	self.typesListCtl:ResetDatas(types)
end

function ShopMallExchangeBuyNFTView:UpdateNFT()
	self.isLoadding = false
	self:UpdateListAllSellNFT()
end

-- 右边的商品分类
function ShopMallExchangeBuyNFTView:UpdateListAllSellNFT()
 if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
 
    if not self.nftlist then
      --  SceneProxy.Instance:MarketplaceManager()
     --   self.nftlist = SceneProxy.Instance:GetMarketplaceManager()
    end
end

	if self.isLoadding == true then
		return
	end

    self.nftlist.listingTable = {}
	self.isLoadding = true
    TableUtility.TableClear(self.nftlist.listingTable)

    if self.nftlist then
        self.nftlist:OnClickLoadListingsAndMetadata(function()
            if self.nftlist.listingTable ~= nil then
                self.listallmetadataTable = {}
                local listingTable = self.nftlist.listingTable
                local itemInfoList = {}
				self.lists = {}
				self.lists2 = {}
                TableUtility.TableClear(itemInfoList)
                TableUtility.TableClear(self.listallmetadataTable)
				TableUtility.TableClear(self.lists)
				TableUtility.TableClear(self.lists2)

                for i = 1, #listingTable do
                    local metadataJson = listingTable[i]
                    local metadata = json.decode(metadataJson)
					--redlog("Metadata for listing #" .. i .. ": " .. tostring(metadataJson))

                    if metadata and metadata.asset and metadata.asset.attributes and metadata.asset.attributes.item_data then
                        local itemData = base64Decode(metadata.asset.attributes.item_data)
                        self.MarketserverOwnItem = SceneItem_pb.ItemData()
                        self.MarketserverOwnItem:ParseFromString(itemData)

                        local itemInfo = {
                            itemid = tonumber(metadata.asset.attributes.itemid),
                            price = tonumber(metadata.currencyValuePerToken.value),
                            count = tonumber(metadata.asset.attributes.count),
                            refine_lv = tonumber(self.MarketserverOwnItem.equip.refinelv),
                            item_data = self.MarketserverOwnItem,
                            isExpired = nil,
                            isNFT = true,
                            Listid = tonumber(metadata.id),
                            ListStatus = tonumber(metadata.status),
							Creator = metadata.creatorAddress,
							Address = self.nftlist.address,
                            publicityId = nil
                        }

						-- redlog("itemid: " .. itemInfo.itemid)

                        local shopMallItem = ShopMallItemData.new(itemInfo)
                        table.insert(itemInfoList, shopMallItem)
						table.insert(self.lists2, itemInfo)
						table.insert(self.lists, itemInfo.itemid)
                    end

                    table.insert(self.listallmetadataTable, metadata)
					self.isLoadding = false
					--self:UpdateGold()
					self:UpdateClassify2()
					self:UpdateDetail(true)
                end			

            end
        end)
    end
end

function ShopMallExchangeBuyNFTView:CallClassify()
	if not self.lists then
		self:UpdateListAllSellNFT()
	else
		self:NFTClassify({lists = self.lists})
		self:UpdateClassify2()
	end
end

function ShopMallExchangeBuyNFTView:NFTClassify(data)
    TableUtility.ArrayClear(self.nftClassify)
    
    local usedItemIds = {}

    if data.lists then
        if self.isSelfProfession then
            self:InitExchangeBuyClassify(data.lists)
        else
            self:InitExchangeBuyClassifys(data.lists)
        end

        local classifyData = self:GetClassifyDataBySelfProfession()
        classifyData = self:GetClassifyDataByFilter(classifyData)

        for _, itemId in ipairs(classifyData) do
        
            if not usedItemIds[itemId] then 
                local classifyItem = ExchangeClassifyData.new()
                classifyItem:SetId(itemId)
                classifyItem:SetIsPublicity(false)
                TableUtility.ArrayPushBack(self.nftClassify, classifyItem)
                              
                usedItemIds[itemId] = true
            end
        end
    end
end


function ShopMallExchangeBuyNFTView:GetClassify()
	return self.nftClassify
end

function ShopMallExchangeBuyNFTView:UpdateClassify2()
    local data = self:GetClassify()
    local isEmpty = #data <= 0

  --  LogUtility.Info("Number of items in classify: ", #data)

    self.emptyClassify:SetActive(isEmpty)
    self.emptyLabelClassify.text = ZhString.ShopMall_ExchangeBuyEmpty
    self.classifyTitle.gameObject:SetActive(not isEmpty)

    local newData = self:ReUniteCellData(data, 2)
    self.classifyWrapHelper:UpdateInfo(newData)
    self.classifyWrapHelper:ResetPosition()
    self.classifyScrollView:Revert()
    self.classifyScrollView.enabled = not isEmpty
end


function ShopMallExchangeBuyNFTView:InitExchangeBuyClassify(lists)
    self.exchangeBuyClassify = {}

    for _, itemId in ipairs(lists) do
        local exchangeData = Table_Exchange[itemId]
        if exchangeData and exchangeData.Category then
            if self.exchangeBuyClassify[exchangeData.Category] == nil then
                self.exchangeBuyClassify[exchangeData.Category] = {}
            end
            table.insert(self.exchangeBuyClassify[exchangeData.Category], exchangeData.id)
        end
    end

    -- จัดเรียงข้อมูลในแต่ละ Category
    for k, v in pairs(self.exchangeBuyClassify) do
        table.sort(v, function(l, r)
            return l < r
        end)
    end
end


function ShopMallExchangeBuyNFTView:InitExchangeBuyClassifys(lists)
	self.exchangeBuyClassifys = {}

	for _, itemId in ipairs(lists) do
        local exchangeData = Table_Exchange[itemId]
        if exchangeData and exchangeData.Category then
            if self.exchangeBuyClassifys[exchangeData.Category] == nil then
                self.exchangeBuyClassifys[exchangeData.Category] = {}
            end
            table.insert(self.exchangeBuyClassifys[exchangeData.Category], exchangeData.id)
        end
    end

    -- จัดเรียงข้อมูลในแต่ละ Category
    for k, v in pairs(self.exchangeBuyClassifys) do
        table.sort(v, function(l, r)
            return l < r
        end)
    end

end


function ShopMallExchangeBuyNFTView:GetExchangeBuyClassify(typeId)
    -- ถ้าไม่มีข้อมูลให้คืนค่าเป็น empty table
    if typeId == nil then
        return {}
    end

    if self.exchangeBuyClassifys == nil then
        self:InitExchangeBuyClassifys() -- โหลดข้อมูลถ้ายังไม่ได้โหลด
    end

    -- คืนค่า empty table ถ้าไม่พบ category ที่ต้องการ
    return self.exchangeBuyClassifys[typeId] or {}
end


function ShopMallExchangeBuyNFTView:JudgeSelfProfession(itemId)
	local equipData = Table_Equip[itemId]
	if equipData then
	 	if #equipData.CanEquip == 1 and equipData.CanEquip[1] == 0 then
	 	 	return true
	 	end
		for i=1,#equipData.CanEquip do
		 	if equipData.CanEquip[i] == MyselfProxy.Instance:GetMyProfession() then
		 		return true
		 	end
		end
	else
		errorLog(string.format("ShopMallProxy JudgeSelfProfession : Table_Equip[%s] == nil",tostring(itemId)))
	end
 	return false
end

function ShopMallExchangeBuyNFTView:GetExchangeBuySelfProfessionClassify(typeId)
    if typeId == nil then
        return {} -- คืนค่าเป็น empty table ถ้าไม่พบ typeId
    end

    if self.exchangeBuySelfProfessionClassify == nil then
        self.exchangeBuySelfProfessionClassify = {}
    end

    if self.exchangeBuyClassify == nil then
        self:InitExchangeBuyClassify() -- โหลดข้อมูลถ้ายังไม่ได้โหลด
    end

    if self.exchangeBuySelfProfessionClassify[typeId] == nil then
        self.exchangeBuySelfProfessionClassify[typeId] = {}
        
        -- ถ้าไม่พบข้อมูลให้คืนค่า empty table
        if self.exchangeBuyClassify[typeId] == nil then
            return {}
        end

        -- กรองข้อมูลตาม profession
        for i = 1, #self.exchangeBuyClassify[typeId] do
            local data = self.exchangeBuyClassify[typeId][i]
            if self:JudgeSelfProfession(data) then
                table.insert(self.exchangeBuySelfProfessionClassify[typeId], data)
            end
        end

        -- จัดเรียงข้อมูล
        table.sort(self.exchangeBuySelfProfessionClassify[typeId], function(l, r)
            return l < r
        end)
    end

    return self.exchangeBuySelfProfessionClassify[typeId]
end

function ShopMallExchangeBuyNFTView:GetClassifyDataBySelfProfession()
	local result = nil
	if self.isSelfProfession then
		result = self:GetExchangeBuySelfProfessionClassify(self.currentTypeData.id)
 	else
 		result = self:GetExchangeBuyClassify(self.currentTypeData.id)
 	end	
 	return result or {}
end


function ShopMallExchangeBuyNFTView:GetClassifyDataByFilter(data)
    if self.filter == ShopMallFilterEnum.Level then
        return ShopMallProxy.Instance:GetExchangeBuyLevelFilterClassify(data, self.levelFilterData) or {}
    elseif self.filter == ShopMallFilterEnum.Fashion then
        return ShopMallProxy.Instance:GetExchangeBuyFashionFilterClassify(data, self.fashionFilterData) or {}
    else
        return data or {} -- คืนค่า empty table ถ้าไม่พบข้อมูล
    end
end

local emptyCellData = {}
function ShopMallExchangeBuyNFTView:_Searching()
	-- LogUtility.Info("_Searching")
	self.classifyTitle.gameObject:SetActive(false)
	self.emptyClassify:SetActive(true)
	self.emptyLabelClassify.text = ZhString.ShopMall_ExchangeBuySearching
	self.classifyWrapHelper:UpdateInfo(emptyCellData)
	self.classifyWrapHelper:ResetPosition()
end

function ShopMallExchangeBuyNFTView:NFTBuyDetail(data)
	
	self.NFTBuyDetails = {}
	self.exchangeBuyDetailTotalPageCount = 50
	--if data.search_cond and data.search_cond.page_index then
	--	self.exchangeBuyDetailCurrentPageIndex = data.search_cond.page_index
	--else
	--	errorLog(string.format("ShopMallProxy RecvExchangeBuyDetail : data.search_cond = %s",tostring(data.search_cond)))
	--end
	-- ตรวจสอบเงื่อนไข
    for i = 1, #data.lists do
        local listItem = data.lists[i]
        -- เช็คว่ารายการมี itemid ตรงกับ currentDetailId
        if listItem.itemid == self.currentDetailId then
            local itemData = ShopMallItemData.new(listItem)
            table.insert(self.NFTBuyDetails, itemData)
        end
    end
end

function ShopMallExchangeBuyNFTView:GetNFTBuyDetail()
	return self.NFTBuyDetails
end


function ShopMallExchangeBuyNFTView:UpdateDetail(isShowEmpty)
	local detail = self:GetNFTBuyDetail()

	if isShowEmpty then
		if detail then
			self.emptyDetail:SetActive(false)
			--redlog("detal 0")
		else
			self.emptyDetail:SetActive(true)
			self:ResetPage()
			--redlog("detal tomuch")
		end
	end

	local newData = self:ReUniteCellData(detail, 2)
	self.detailWrapHelper:UpdateInfo(newData)
	self.detailWrapHelper:ResetPosition()

	self.currentDetalCell = nil
end

-- 右上方的职业、等级筛选
function ShopMallExchangeBuyNFTView:UpdateClassifyOption(cellCtl)
	if cellCtl.data.jobOption == 1 then
		self.selfProfessionRoot:SetActive(true)
	else
		self.selfProfessionRoot:SetActive(false)
		self.isSelfProfession = false
	end

	if cellCtl.data.levelOption == 1 then
		self.levelFilterRoot:SetActive(true)
		self.fashionFilterRoot:SetActive(false)
		self.filter = ShopMallFilterEnum.Level
	elseif cellCtl.data.levelOption == 2 then
		self.levelFilterRoot:SetActive(false)
		self.fashionFilterRoot:SetActive(true)
		self.filter = ShopMallFilterEnum.Fashion
	else
		self.levelFilterRoot:SetActive(false)
		self.fashionFilterRoot:SetActive(false)
		self.levelFilterData = nil
		self.fashionFilterData = nil
		self.filter = nil
	end
end

-- 右上方的精炼筛选
function ShopMallExchangeBuyNFTView:UpdateDetailOption(cellCtl)
	if self.currentTypeData.refineOption == 1 then
	 	self.refineSortBtn:SetActive(true)
	else
	 	self.refineSortBtn:SetActive(false)
	 end
end

function ShopMallExchangeBuyNFTView:UpdateRoleData()
	self.rolelevel = MyselfProxy.Instance:RoleLevel()

--	self:UpdateGold()
end

function ShopMallExchangeBuyNFTView:UpdateGold()
    -- ตรวจสอบว่า nftlist ถูกสร้างแล้วหรือยัง
	 if(ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsPlayer or ApplicationInfo.GetRunPlatform() == RuntimePlatform.WindowsEditor or ApplicationInfo.GetRunPlatform() == RuntimePlatform.Android)then
    local function checkNftList()
        if not self.nftlist then
            SceneProxy.Instance:MarketplaceManager()
            SceneProxy.Instance:CreateNFTLoader()
            self.nftlist = SceneProxy.Instance:GetMarketplaceManager()
        end

        -- ถ้า nftlist ยังไม่ได้ถูกสร้าง ให้รอและตรวจสอบใหม่
        if not self.nftlist.balanceamount then
           -- redlog("Waiting for nftlist to be created...")
            LeanTween.delayedCall(0.5, checkNftList)  -- ตรวจสอบทุก 0.5 วินาที
        else
            -- เมื่อ nftlist ถูกสร้างเสร็จแล้ว ให้เรียก Updateprice
            self.nftlist:Updateprice(function()
                local getprice = self.nftlist.balanceamount
                if getprice ~= nil then
                    local pricecrypto = tonumber(getprice)
                    local formattedPrice = pricecrypto / (10 ^ 6)
                    local pricetext = string.format("%.8f", formattedPrice)
                    self.money.text = StringUtil.NumThousandFormatWithDecimals(tonumber(pricetext), ",", 6)
                else
                   -- redlog("Failed to get price.")
                end
            end)
        end
    end

    -- เริ่มต้นตรวจสอบ
    checkNftList()
end
end


function ShopMallExchangeBuyNFTView:UpdatePage()
	self.pageInput.value = self.currentPage
	self.page.text = "/"..self.totalPage
end

function ShopMallExchangeBuyNFTView:SetLimitCallDetail()
	self.limitCallDetail = Time.unscaledTime
end

function ShopMallExchangeBuyNFTView:ClearLimitCallDetail()
	self.limitCallDetail = nil
end

function ShopMallExchangeBuyNFTView:CheckLimitCallDetail()
	if self.limitCallDetail ~= nil and Time.unscaledTime - self.limitCallDetail < 2.5 then
		return true
	end
	return false
end

local search_cond = {}
function ShopMallExchangeBuyNFTView:CallDetailList()
	TableUtility.TableClear(search_cond)
	search_cond.item_id = self.currentDetailId
	search_cond.page_index = self.currentPage - 1
	if self.rankType then
		search_cond.rank_type = self.rankType
	end
	search_cond.trade_type = self.tradeFilterData

	
end

function ShopMallExchangeBuyNFTView:RecvDetailList()
	self:ClearLimitCallDetail()

	self.totalPage = ShopMallProxy.Instance:GetExchangeBuyDetailTotalPageCount()
	local pageIndex = ShopMallProxy.Instance:GetExchangeBuyDetailCurrentPageIndex()
	if pageIndex then
		self.currentPage = pageIndex + 1
	end
	self:UpdatePage()

	self:UpdateDetail(true)
end

function ShopMallExchangeBuyNFTView:RecvBuyItem(note)
	local data = note.body
	if data.type == BoothProxy.TradeType.Exchange then
		self:CallDetailList()
	end
end

function ShopMallExchangeBuyNFTView:SearchOpenDetail(note)
	local cell = note.body
	local id = cell.data
	self:SelectTypes(id)
	self:ClickClassify(cell,id)
end

function ShopMallExchangeBuyNFTView:UpdateView()
	self:CallDetailList()
end

function ShopMallExchangeBuyNFTView:ResetPage()
	self.currentPage = 1
	self.totalPage = 1
	self:UpdatePage()
end

function ShopMallExchangeBuyNFTView:ResetRank()
	self.rankType = nil

	local icon = ZhString.ShopMall_ExchangeSortInc
	self.refineSortLabel.text = ZhString.ShopMall_ExchangeRefine..icon
	self.priceSortLabel.text = ZhString.ShopMall_ExchangePrice..icon

	self.isRefineSortDes = false
	self.isPriceSortDes = false
end

function ShopMallExchangeBuyNFTView:ResetSelfProfession()
	if self.selfProfessionRoot.activeInHierarchy then
		self.isSelfProfession = self.selfProfession.value	
	end
end

function ShopMallExchangeBuyNFTView:ShowClassifyView(isShow)
	self.classify:SetActive(isShow)
	self.detail:SetActive(not isShow)
end

--通过Table_ItemTypeAdventureLog中的父id，获得当前cell
function ShopMallExchangeBuyNFTView:GetParentTypeCellById(parentId)
 	local typesCells = self.typesListCtl:GetCells()
	for i=1,#typesCells do
		if typesCells[i].data.id == parentId then
			return typesCells[i]
		end
	end

	return nil
end

--通过 父cell和Table_ItemTypeAdventureLog中的子id，获得当前cell
function ShopMallExchangeBuyNFTView:GetChildTypeCellById(parentCell,childId)
	local childCells = parentCell.childCtl:GetCells()
	for i=1,#childCells do
		if childCells[i].data.id == childId then
			return childCells[i]
		end
	end

	return nil
end

function ShopMallExchangeBuyNFTView:ReUniteCellData(datas, perRowNum)
	local newData = {}
	if(datas~=nil and #datas>0)then
		for i = 1,#datas do
			local i1 = math.floor((i-1)/perRowNum)+1;
			local i2 = math.floor((i-1)%perRowNum)+1;
			newData[i1] = newData[i1] or {};
			if(datas[i] == nil)then
				newData[i1][i2] = nil;
			else
				newData[i1][i2] = datas[i];
			end
		end
	end
	return newData;
end