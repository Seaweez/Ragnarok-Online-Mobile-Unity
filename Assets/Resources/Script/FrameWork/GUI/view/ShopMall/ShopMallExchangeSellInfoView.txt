autoImport("ExchangeIntroduceData")
autoImport("ShopMallExchangeSellInfoCell")
autoImport("ExchangeSellIntroduceCell")
-- autoImport("ShopMallExchangeDetailCell")

ShopMallExchangeSellInfoView = class("ShopMallExchangeSellInfoView",ContainerView)
ShopMallExchangeSellInfoView.Instance = nil
ShopMallExchangeSellInfoView.ViewType = UIViewType.PopUpLayer

function ShopMallExchangeSellInfoView:OnExit()
	self.sellCell:Exit()
	if self.introCell then
		self.introCell:OnDestroy()
	end
	ShopMallExchangeSellInfoView.super.OnExit(self)
end

function ShopMallExchangeSellInfoView:Init()
    ShopMallExchangeSellInfoView.Instance = self
	self:FindObjs()
	self:AddEvts()
	self:AddViewEvts()
	self:InitShow()
	
end

function ShopMallExchangeSellInfoView:FindObjs()
	-- self.sellingContainer = self:FindGO("SellingContainer")
	-- self.empty = self:FindGO("Empty")
	self.title = self:FindGO("Title"):GetComponent(UILabel)
	self.name = self:FindGO("Name"):GetComponent(UILabel)
	self.sellingScrollView = self:FindGO("ScrollView").transform
	self.helpButton = self:FindGO("HelpButton")

end

function ShopMallExchangeSellInfoView:AddEvts()
	-- body
	
end

function ShopMallExchangeSellInfoView:AddViewEvts()
	self:AddListenEvt(ServiceEvent.RecordTradeReqServerPriceRecordTradeCmd , self.RecvItemPrice)
	self:AddListenEvt(ServiceEvent.RecordTradeSellItemRecordTradeCmd , self.RecvSellItem)
	-- self:AddListenEvt(ServiceEvent.RecordTradeItemSellInfoRecordTradeCmd , self.UpdateSellingList)
	-- self:AddListenEvt(ServiceEvent.RecordTradeItemSellInfoRecordTradeCmd , self.RecvInfo)
	self:AddListenEvt(ServiceEvent.RecordTradeCancelItemRecordTrade , self.RecvCancel)
end

function ShopMallExchangeSellInfoView:InitShow()
	if self.viewdata.viewdata and self.viewdata.viewdata.data and self.viewdata.viewdata.type then
		self.itemData = self.viewdata.viewdata.data
		self.type = self.viewdata.viewdata.type
		self.serverItem = self.viewdata.viewdata.serverItem
		local isNFT = self.viewdata.viewdata.nft or false  -- รับค่าจาก viewdata

		 local cardTypeRangeStart = 80
        local cardTypeRangeEnd = 89

		-- รายการ Zeny voucher IDs
        local zenyvoucher = {1510006, 1510007, 1510008, 3000505, 3000506, 3000507}
        
        -- ดึงค่า Type ของไอเท็ม
        local itemType = Table_Item[self.itemData.staticData.id].Type
        local itemZeny = Table_Item[self.itemData.staticData.id].id
        
        -- ตรวจสอบว่า Type อยู่ในช่วง 80-89 หรือไม่ (เป็นการ์ด)
		local isCard = (itemType >= cardTypeRangeStart and itemType <= cardTypeRangeEnd)

		local isZeny = false
        for _, voucherID in ipairs(zenyvoucher) do
            if itemZeny == voucherID then
                isZeny = true
                break
            end
        end
		
		local cell = self.viewdata.viewdata.cell
		local go = nil
		local reciptEX = self:FindGO("ReciptEX", self.gameObject)

		if self.type == ShopMallExchangeSellEnum.Sell then
			if self.itemData.staticData.MaxNum == 1 or isZeny then
				go = self:LoadPreferb("cell/SellNotOverLapCell")
			else
				go = self:LoadPreferb("cell/SellOverLapCell")
			end
		elseif self.type == ShopMallExchangeSellEnum.Resell then
			go = self:LoadPreferb("cell/ExchangeResellCell")
		elseif self.type == ShopMallExchangeSellEnum.Cancel then
  			if self.itemData.staticData.MaxNum == 1 then
				go = self:LoadPreferb("cell/CancelSellNotOverLapCell")
			else
				go = self:LoadPreferb("cell/CancelSellOverLapCell")
			end
		elseif self.type == ShopMallExchangeSellEnum.CancelList then
  			if self.itemData.staticData.MaxNum == 1 or isCard or isZeny then
				go = self:LoadPreferb("cell/CancelNFTNotOverLapCell")			
			else
				go = self:LoadPreferb("cell/CancelSellOverLapCell")
			end
		elseif self.type == ShopMallExchangeSellEnum.SellNFT then
  			if self.itemData.staticData.MaxNum == 1 or isCard or isZeny then
				go = self:LoadPreferb("cell/SellNotOverLapCell")
			else
				go = self:LoadPreferb("cell/SellOverLapCell")
			end
		end
		FunctionItemTrade.Me():GetTradePrice(self.itemData, true , true)
		
		self.sellCell = ShopMallExchangeSellInfoCell.new(go)
		self.itemData.sellType = self.type
		if cell then
			self.itemData.shopMallItemData = cell.data
		end
		self.sellCell:SetData(self.itemData, self.serverItem, isNFT)  -- ส่งค่า isNFT ไปด้วย
		self.sellCell:AddEventListener(ShopMallEvent.ExchangeCloseSellInfo, self.CloseSelf , self)
		self.sellCell:AddEventListener(ShopMallEvent.ExchangeHideSellInfo, function()
        self:HideSelf()
		end, self)

	
		if reciptEX then
			if isNFT or self.type == ShopMallExchangeSellEnum.CancelList then
				reciptEX:SetActive(false)  -- ซ่อน ReciptEX ถ้าเป็น NFT
			else
				reciptEX:SetActive(true)   -- แสดง ReciptEX ถ้าไม่เป็น NFT
			end
		end

		self.name.text = self.itemData.staticData.NameZh
		self.helpButton:SetActive(false)
	else
		print(string.format("viewdata : %s , viewdata.data : %s , viewdata.type : %s",tostring(self.viewdata.viewdata),tostring(self.viewdata.viewdata.data),tostring(self.viewdata.viewdata.type)))
	end
end
function ShopMallExchangeSellInfoView:GetDataCell()
	return self.viewdata.viewdata.cell
end

function ShopMallExchangeSellInfoView:HideSelf()
    local reciptEX = self:FindGO("ReciptEX", self.gameObject)
    if reciptEX then
        reciptEX:SetActive(false)  -- ซ่อน ReciptEX
    end
end


function ShopMallExchangeSellInfoView:RecvItemPrice(note)
	local data = note.body
	local celldata = self:GetDataCell()
	if data then
		if data.itemData and data.itemData.base and self.itemData.staticData.id ~= data.itemData.base.id then
			return
		end

		local introData = ExchangeIntroduceData.new(data)
		if self.type == ShopMallExchangeSellEnum.CancelList then
			self.sellCell:SetPrice(celldata.data.price)
		else
			self.sellCell:SetPrice(data.price)
		end
		self.sellCell:SetPublicity(data.statetype)

		local go
		if data.statetype == ShopMallStateTypeEnum.WillPublicity or data.statetype == ShopMallStateTypeEnum.InPublicity then
			self.title.text = ZhString.ShopMall_ExchangePublicityTitle
			self.helpButton:SetActive(true)

			if data.statetype == ShopMallStateTypeEnum.WillPublicity then
				--将要进入公示期
				go = self:LoadPreferb("cell/SellFirstPublicityCell",self.sellingScrollView)
			else
				--已经处在公示期
				go = self:LoadPreferb("cell/SellPublicityCell",self.sellingScrollView)
			end
		else
			--普通商品
			self.title.text = ZhString.ShopMall_ExchangeNormalTitle

			if self.itemData.enchantInfo and #self.itemData.enchantInfo:GetEnchantAttrs() > 0 then
				--拥有附魔装备
				go = self:LoadPreferb("cell/SellNormalEnchantCell",self.sellingScrollView)
			elseif self.itemData.staticData.MaxNum == 1 then
				--不可堆叠
				go = self:LoadPreferb("cell/SellNormalNotOverLapCell",self.sellingScrollView)	
			else
				--可堆叠
				go = self:LoadPreferb("cell/SellNormalOverLapCell",self.sellingScrollView)
			end
		end

		self.introCell = ExchangeSellIntroduceCell.new(go)
		self.introCell:SetData(introData)
	end
end

function ShopMallExchangeSellInfoView:RecvSellItem(note)
	local data = note.body	
	if data.type == BoothProxy.TradeType.Exchange and data.ret == ProtoCommon_pb.ETRADE_RET_CODE_SUCCESS then
		self:CloseSelf()
		ServiceRecordTradeProxy.Instance:CallMyPendingListRecordTradeCmd( nil , Game.Myself.data.id)
	end
end

function ShopMallExchangeSellInfoView:RecvCancel(note)
	local data = note.body
	if data.type == BoothProxy.TradeType.Exchange and data.ret == ProtoCommon_pb.ETRADE_RET_CODE_SUCCESS then
		ServiceRecordTradeProxy.Instance:CallMyPendingListRecordTradeCmd( nil , Game.Myself.data.id)

		self:CloseSelf()
	end
end