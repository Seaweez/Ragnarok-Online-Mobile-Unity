SetViewEffectState = class("SetViewEffectState",SubView)

local resolutionLabTab = {}
local resolutionIndex = 1
lastSelected = PlayerPrefs.GetString("CurrentLanguage", "WW_English")

local TargetFrameRate = {
  {
    name = '30 FPS',
    count = 30,
    index = 1
  },
  {
    name = '60 FPS',
    count = 60,
    index = 2
  }
}

function SetViewEffectState:Init ()
     self:FindObj()
     self:AddEvts()
     self:InitFrameRateData()
     self:Show()
end

function SetViewEffectState:FindObj ()

    if self:FindGO("OutlineSet/OutlineToggle") then
        self.outlineToggle = self:FindGO("OutlineSet/OutlineToggle"):GetComponent("UIToggle")
        self.effectToggle = self:FindGO("EffectSet/EffectToggle"):GetComponent("UIToggle")
        self.toonLightToggle = self:FindGO("ToonLightSet/ToonLightToggle"):GetComponent("UIToggle")
        self.slimToggle = self:FindGO("SlimToggle"):GetComponent("UIToggle")
        self.selfPeakToggle = self:FindGO("SelfPeakToggle"):GetComponent("UIToggle")
        self.otherPeakToggle = self:FindGO("OtherPeakToggle"):GetComponent("UIToggle")
          self.targetFrameRate = self:FindGO("FrameRatePop"):GetComponent("UIPopupList")
        self.screenCountToggleLow = self:FindGO("ScreenCountToggleLow"):GetComponent("UIToggle")
    	self.screenCountToggleMid = self:FindGO("ScreenCountToggleMid"):GetComponent("UIToggle")
    	self.screenCountToggleHigh = self:FindGO("ScreenCountToggleHigh"):GetComponent("UIToggle")
        self.ShowOtherNameToggle = self:FindGO("ShowOtherNameToggle"):GetComponent("UIToggle")
        self.ShowOtherCharToggle = self:FindGO("ShowOtherCharToggle"):GetComponent("UIToggle")
        self.ResolutionFilter = self:FindGO("ResolutionFilter"):GetComponent("UIPopupList")
        self.LocalizationFilter = self:FindGO("LocalizationFilter"):GetComponent("UIPopupList")
        self.Localization = self:FindGO("Localization"):GetComponent("LocalizationManager") 
        self.LocalizationFilter.value = string.gsub(lastSelected, "WW_", "")
       -- Valuelocalizaiton = self.Localization.currentLanguage
    end        
end

function SetViewEffectState:OnEnter()
  SetViewEffectState.super.OnEnter(self)
  self.OnEnterTag = true
end

function SetViewEffectState:OnExit()
  self.OnEnterTag = false
  self.FirstEnter = nil
  SetViewEffectState.super.OnExit(self)
end

function SetViewEffectState:AddEvts()

    if self.ResolutionFilter then
        EventDelegate.Add(self.ResolutionFilter.onChange, function()
            resolutionIndex = resolutionLabTab[self.ResolutionFilter.value]
            -- redlog("resolutionIndex: ",resolutionIndex)
        end)
    end
    if self.LocalizationFilter then
 
        redlog("LocalizationFilter22: ",self.LocalizationFilter.value)
        EventDelegate.Add(self.LocalizationFilter.onChange, function()
            -- Game.Me():BackToLogo()
            local combinedValue = "WW_" .. self.LocalizationFilter.value
           -- redlog("LocalizationFilter: ",self.Localization.currentLanguage)
           -- redlog("dataFilter: ",combinedValue)
            if combinedValue ~= self.Localization.currentLanguage then
               PlayerPrefs.SetString("CurrentLanguage", "WW_" .. self.LocalizationFilter.value)
               PlayerPrefs.Save()
               Game.Me():BackToLogo()
		    end        
        end)
    end

    EventDelegate.Add(self.targetFrameRate.onChange, function()
    local data = self.targetFrameRate.data
    UnityEngine.Application.targetFrameRate = data.count
    if data.count == 30 then
      if self.OnEnterTag ~= true then
        return
      end
      if self.FirstEnter == nil then
        self.FirstEnter = true
        return
      end
      if self.currentRate == 30 then
        return
      end
      self.currentRate = 30     
    elseif data.count == 60 then
      if self.OnEnterTag ~= true then
        return
      end
      if self.currentRate == 60 then
        return
      end
      self.currentRate = 60    
    end
  end)
 
end

function SetViewEffectState:SettingUI()
    if self.ResolutionFilter then
        self.ResolutionFilter:Clear()
        resolutionLabTab = {}
        local tab = Game.GetResolutionNames()
        for i=1,#tab do
            local str = tab[i]
            self.ResolutionFilter:AddItem(str)
            resolutionLabTab[str] = i
        end
       
        local setting = FunctionPerformanceSetting.Me()
        local screenCount = setting:GetSetting().screenCount

        self.outlineToggle.value = setting:GetSetting().outLine
        self.toonLightToggle.value = setting:GetSetting().toonLight
        self.effectToggle.value = not setting:GetSetting().effectLow
        self.selfPeakToggle.value = setting:GetSetting().selfPeak
        self.otherPeakToggle.value = setting:GetSetting().otherPeak
        self.ShowOtherNameToggle.value = setting:GetSetting().isShowOtherName
        self.ShowOtherCharToggle.value = setting:GetSetting().showOtherChar
        self.ResolutionFilter.value = tab[setting:GetSetting().resolution]
        resolutionIndex = setting:GetSetting().resolution
        self.screenCountToggleMid.value = screenCount == GameConfig.Setting.ScreenCountMid and true or false
        self.screenCountToggleHigh.value = screenCount == GameConfig.Setting.ScreenCountHigh and true or false
        self.screenCountToggleLow.value = screenCount == GameConfig.Setting.ScreenCountLow and true or false
        local rateKey = setting:GetSetting().targetFrameRate
        self.targetFrameRate.value = TargetFrameRate[rateKey].name
        local option = Game.Myself.data.userdata:Get(UDEnum.OPTION)
        if option ~= nil then
            self.slimToggle.value = BitUtil.band(option, SceneUser2_pb.EOPTIONTYPE_USE_SLIM) > 0
        else
            self.slimToggle.value = true
        end
    end    
end

function SetViewEffectState:Show ()
    self:SettingUI()
end

function SetViewEffectState:Save ()
    self:SetNormalModeData()
end

function SetViewEffectState:SetNormalModeData()
    local setting = FunctionPerformanceSetting.Me()
    local screenCount
    if self.screenCountToggleMid.value == true then
        screenCount = GameConfig.Setting.ScreenCountMid
    elseif self.screenCountToggleHigh.value == true then
        screenCount = GameConfig.Setting.ScreenCountHigh
    else
        screenCount = GameConfig.Setting.ScreenCountLow
    end

    setting:SetBegin()
    setting:SetOutLine(self.outlineToggle.value)
    setting:SetToonLight(self.toonLightToggle.value)
    setting:SetEffectLow(not self.effectToggle.value)
    setting:SetSlim(self.slimToggle.value)
    setting:SetSelfPeak(self.selfPeakToggle.value)
    setting:SetOtherPeak(self.otherPeakToggle.value)
    setting:SetScreenCount(screenCount)
    local frameRate = self.targetFrameRate.data
    setting:SetFrameRate(frameRate.index)
    setting:SetShowOtherName(self.ShowOtherNameToggle.value)
    setting:SetShowOtherChar(self.ShowOtherCharToggle.value)
    setting:SetResolution(resolutionIndex)
    -- Apply the resolution and screen mode settings
   -- local fullScreen = self.fullScreenToggle.value
   -- self:ChangeScreenMode(fullScreen)
    setting:SetEnd()
end

function SetViewEffectState:InitFrameRateData()
  self.targetFrameRate:Clear()
  for i = 1, #TargetFrameRate do
    local single = TargetFrameRate[i]
    self.targetFrameRate:AddItem(single.name, single)
  end
end

function SetViewEffectState:Exit ()
local setting = FunctionPerformanceSetting.Me()
  local rateKey = setting:GetSetting().targetFrameRate
  UnityEngine.Application.targetFrameRate = TargetFrameRate[rateKey].count
    
end

function SetViewEffectState:SwitchOn ()
    
end

function SetViewEffectState:SwitchOff ()
    
end
