SkillFreeCast_Client = class("SkillFreeCast_Client", SkillFreeCast)

local FindCreature = SceneCreatureProxy.FindCreature

function SkillFreeCast_Client.Create(args)
	return ReusableObject.Create(SkillFreeCast_Client, true, args)
end

function SkillFreeCast_Client:Update_FreeCast(time, deltaTime, creature)
	if not self.info.LogicClass.Client_PreUpdate_FreeCast(self, time, deltaTime, creature) then
		self:_SwitchToNone(creature)
		return false
	end
	return SkillFreeCast_Client.super.Update_FreeCast(self, time, deltaTime, creature)
end

function SkillFreeCast_Client:CheckTargetCreature(creature)
	local targetCreature = FindCreature(self.targetCreatureGUID)
	if nil == targetCreature then
		return false
	end

	if not self:CheckTargetPosition(creature, targetCreature:GetPosition()) then
		return false
	end

	return self.info:CheckTarget(creature, targetCreature)
end

function SkillFreeCast_Client:CheckTargetPosition(creature, targetPosition)
	local launchRange = self.info:GetLaunchRange(creature)
	if 0 < launchRange then
		local testRange = launchRange * 1.5
		local currentPosition = creature:GetPosition()
		if VectorUtility.DistanceXZ(currentPosition, targetPosition) > testRange then
			return false
		end
	end
	return true
end

function SkillFreeCast_Client:_SwitchToAttack(creature)
    SkillFreeCast_Client.super._SwitchToAttack(self, creature)

    local targetCreature
    if self.targetCreatureGUID ~= 0 then
        targetCreature = FindCreature(self.targetCreatureGUID)
    end

    -- โหลดข้อมูลบัฟจาก PlayerPrefs
    local roleID = Game.Myself.data.id
    local profession = tostring(Game.Myself.data.userdata:Get(UDEnum.PROFESSION))
    local buffList = self:LoadBuffListFromPrefs(roleID, profession)

    -- ดึงค่า additional_skillids จาก buffList
    local additional_skillids = {}
    for _, buffData in ipairs(buffList) do
        if buffData.skillID then
            table.insert(additional_skillids, buffData.skillID)
        end
    end

    creature:Client_UseSkill(
        self.info:GetSkillID(creature),
        targetCreature,
        self.phaseData:GetPosition(),
        nil,
        nil,
        nil,
        nil,
        true,
        true,
        additional_skillids -- ส่ง additional_skillids ไปด้วย
    )
end

function SkillFreeCast_Client:_SwitchToNone(creature)
	local phase = self.phaseData:GetSkillPhase()
	SkillFreeCast_Client.super._SwitchToNone(self, creature)
	if phase == SkillPhase.FreeCast then
		self:_NotifyServer(creature)
	end
end

function SkillFreeCast_Client:LoadBuffListFromPrefs(roleID, profession)
    if not profession then
        profession = tostring(Game.Myself.data.userdata:Get(UDEnum.PROFESSION))
    end

    local buffList = {}
    for i = 1, 7 do
        local key = "BuffSlot_" .. roleID .. "_" .. profession .. "_" .. i
        local buffDataJson = PlayerPrefs.GetString(key, nil)
        if buffDataJson and buffDataJson ~= "" then
            local success, buffData = pcall(json.decode, buffDataJson)
            if success then
                table.insert(buffList, buffData)
            else
                table.insert(buffList, {})
                --helplog("Failed to decode JSON for key: " .. key)
            end
        else
            table.insert(buffList, {})
        end
    end
    return buffList
end


function SkillFreeCast_Client:_NotifyServer(creature)

	creature:Client_UseSkillHandler(
		self.random, 
		self.phaseData, 
		self.targetCreatureGUID,
        additional_skillids)
end